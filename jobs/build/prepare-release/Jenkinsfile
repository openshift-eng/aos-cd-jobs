import java.text.SimpleDateFormat

node {
    wrap([$class: "BuildUser"]) {
        checkout scm
        def buildlib = load("pipeline-scripts/buildlib.groovy")
        def commonlib = buildlib.commonlib

        def dateFormat = new SimpleDateFormat("yyyy-MMM-dd")
        def date = new Date()

        commonlib.describeJob("prepare-release", """
            <h2>This job will perform an assortment of release tasks for creating a release from scratch.</h2>
            <b>Timing</b>: On the prepare-the-release day (Monday).
        """)

        properties(
            [
                disableResume(),
                buildDiscarder(
                    logRotator(
                        artifactDaysToKeepStr: "",
                        artifactNumToKeepStr: "",
                        daysToKeepStr: "",
                        numToKeepStr: "")),
                [
                    $class: "ParametersDefinitionProperty",
                    parameterDefinitions: [
                        commonlib.ocpVersionParam('VERSION', '4'),
                        string(
                            name: "ASSEMBLY",
                            description: "The name of an assembly; must be defined in releases.yml (e.g. 4.9.1)",
                            defaultValue: "stream",
                            trim: true
                        ),
                        string(
                            name: "NAME",
                            description: "The expected release name (e.g. 4.6.42); Do not specify for a non-stream assembly.",
                            trim: true
                        ),
                        string(
                            name: "DATE",
                            description: "Intended release date. Format: YYYY-Mon-dd (example: 2050-Jan-01)",
                            defaultValue: "${dateFormat.format(date)}",
                            trim: true
                        ),
                        string(
                            name: "NIGHTLIES",
                            description: "(Optional for 3.y.z) list of proposed nightlies for each arch, separated by comma; Do not specify for a non-stream assembly (nightlies should be in releases.yml)",
                            trim: true
                        ),
                        string(
                            name: "PACKAGE_OWNER",
                            description: "(Optional) Must be an individual email address; may be anyone who wants random advisory spam",
                            defaultValue: "lmeyer@redhat.com",
                            trim: true
                        ),
                        booleanParam(
                            name: "DEFAULT_ADVISORIES",
                            description: "Do not create advisories/jira; pick them up from ocp-build-data; Do not specify for a non-stream assembly (advisories should be in releases.yml)",
                            defaultValue: false
                        ),
                        booleanParam(
                            name: "DRY_RUN",
                            description: "Take no action, just echo what the job would have done.",
                            defaultValue: false
                        ),
                        commonlib.mockParam(),
                    ]
                ],
            ]
        )   // Please update README.md if modifying parameter names or semantics

        commonlib.checkMock()
        stage("initialize") {
            buildlib.initialize()
            buildlib.registry_quay_dev_login()
            if (params.NAME) {
                def (major, minor) = commonlib.extractMajorMinorVersionNumbers(params.NAME)
                currentBuild.displayName += " - $params.NAME"
                if (major >= 4 && !params.NIGHTLIES) {
                    error("For OCP 4 releases, you must provide a list of proposed nightlies.")
                }
            } else {
                currentBuild.displayName += " - $params.VERSION - $params.ASSEMBLY"
            }

            commonlib.shell(script: "pip install -e ./pyartcd")
        }
        stage ("Notify release channel") {
            if (params.DRY_RUN) {
                return
            }
            slackChannel = slacklib.to(params.NAME)
            slackChannel.say(":construction: Preparing release for $params.NAME :construction:")
        }

        stage("prepare release") {
            sh "mkdir -p ./artcd_working"
            def cmd = [
                "artcd",
                "-vv",
                "--working-dir=./artcd_working",
                "--config", "./config/artcd.toml",
            ]
            if (params.DRY_RUN) {
                cmd << "--dry-run"
            }
            cmd += [
                "prepare-release",
                "--group", "openshift-${params.VERSION}",
                "--assembly", params.ASSEMBLY,
                "--date", params.DATE,
            ]
            if (params.NAME) {
                cmd << "--name" << params.NAME
            }
            if (params.DEFAULT_ADVISORIES) {
                cmd << "--default-advisories"
            }
            if (params.PACKAGE_OWNER)
                cmd << "--package-owner" << params.PACKAGE_OWNER
            if (params.NIGHTLIES) { // unlike other languages you are familar,like Python, "".split() returns [""]
                for (nightly in params.NIGHTLIES.split("[,\\s]+")) {
                    cmd << "--nightly" << nightly.trim()
                }
            }
            sshagent(["openshift-bot"]) {
                withCredentials([usernamePassword(
                    credentialsId: 'jboss_jira_login',
                    usernameVariable: 'JIRA_USERNAME',
                    passwordVariable: 'JIRA_PASSWORD',
                )]) {
                    echo "Will run ${cmd}"
                    commonlib.shell(script: cmd.join(' '))
                }
            }
        }
        stage("trigger olm_bundle") {
            if (major !=4 || minor < 6) {
                echo "Skipping olm_bundle jobs for releases prior to 4.6. Trigger appregistry job."
                return
            }
            build(
                job: 'build%252Folm_bundle',
                propagate: true,
                parameters: [
                    buildlib.param('String','BUILD_VERSION', "$major.$minor"),
                    buildlib.param('String','EXTRAS_ADVISORY', extras),
                    buildlib.param('String','METADATA_ADVISORY', metadata),
                    booleanParam(name: 'DRY_RUN', value: params.DRY_RUN),
                ]
            )
            currentBuild.description += "<br>triggered olm_bundle"
        }
        stage("save artifacts") {
            commonlib.safeArchiveArtifacts([
                "pyartcd_working/email/**",
                "pyartcd_working/**/*.json",
                "pyartcd_working/**/*.log",
            ])
        }
        buildlib.cleanWorkspace()
    }
}
