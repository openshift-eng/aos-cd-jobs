properties([
    buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '100')),
    disableConcurrentBuilds(),
    disableResume(),
])


description = ""
failed = false

def runFor(version, channelPrefix, linkName) {
    try {
        timeout(activity: true, time: 30, unit: 'MINUTES') {
            b = build(
                    job: '../aos-cd-builds/build%2Fset_client_latest',
                    parameters: [
                        string(name: 'CHANNEL_OR_RELEASE', value: "${channelPrefix}-${version}"),
                        string(name: 'CLIENT_TYPE', value: 'ocp'),
                        string(name: 'LINK_NAME', value: linkName),
                        string(name: 'ARCHES', value: 'any'),
                    ],
                    propagate: false,
                )
            description += "${linkName} -> ${channelPrefix}-${version} - ${b.result}\n"
            failed |= (b.result != "SUCCESS")
        }
    } catch (err) {
        slacklib.to('#art-release').failure("Error running set_client_latest\n${err}")
    }
}

@NonCPS
def sortedVersions() {
  // Return versions honoring semver
  return commonlib.ocp4Versions.sort(false) {
    def major_minor = it.tokenize('.')

    assert major_minor.size() == 2

    def major = major_minor[0].toInteger()
    def minor = major_minor[1].toInteger()

    major*100000 + minor
  }
}

node() {
    checkout scm
    buildlib = load("pipeline-scripts/buildlib.groovy")
    commonlib = buildlib.commonlib

    for ( String version : sortedVersions() ) {
        runFor(version, 'stable', 'stable')
        runFor(version, 'fast', 'latest') // the latest links should track fast
        runFor(version, 'fast', 'fast')
        runFor(version, 'candidate', 'candidate')
    }
    buildlib.cleanWorkspace()
}

currentBuild.description = description.trim()
currentBuild.result = failed ? "FAILURE" : "SUCCESS"
