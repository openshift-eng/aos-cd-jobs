properties([
    buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '100')),
    disableConcurrentBuilds(),
    disableResume(),
])

description = ""
failed = false

def runFor(group, dir, arch="x86_64") {
    echo "Triggering reposync for ${group}-${arch}"
    b = build(
        job: '/aos-cd-builds/build%2Fsync-for-ci', propagate: false,
        parameters: [
            string(name: 'GROUP', value: group ),
            string(name: 'REPOSYNC_DIR', value: dir),
            string(name: 'ARCH', value: arch),
        ],
    )

    description += "${group}-${arch} - ${b.result}\n"
    failed |= (b.result != "SUCCESS")
}

@NonCPS
def sortedVersions() {
  // Return versions honoring semver, but exclude disabled
  def disabled = []
  def s = commonlib.ocp4Versions.sort(false) {
    def major_minor = it.tokenize('.')

    assert major_minor.size() == 2

    def major = major_minor[0]
    def minor = major_minor[1]

    major*100000 + minor
  }
  return s.findAll { !disabled.contains(it) }
}

node() {
    checkout scm
    buildlib = load("pipeline-scripts/buildlib.groovy")
    commonlib = buildlib.commonlib
    for ( String version : sortedVersions() ) {
        group = "openshift-${version}"
        def arches = buildlib.branch_arches(group)

        for ( String arch : arches ) {
            runFor(group, version, arch)
            if ( version == sortedVersions()[-1] ) {
￼                def (major, minor) = commonlib.extractMajorMinorVersionNumbers(version)
￼                runFor(group, "${major}.${minor+1}", arch)
￼           }
        }
    }
    runFor('ci-deps', 'ci-deps', 'x86_64')
}

currentBuild.description = description.trim()
currentBuild.result = failed ? "FAILURE" : "SUCCESS"
