---
parent: 'common/test_cases/origin.yml'
extensions:
  sync_repos:
    - name: "openshift-ansible"
    - name: "aos-cd-jobs"
  actions:
    - type: "script"
      title: "build an origin release"
      repository: "origin"
      script: |-
        hack/build-base-images.sh
        OS_BUILD_ENV_PRESERVE=_output/local hack/env OS_ONLY_BUILD_PLATFORMS='linux/amd64' hack/build-rpm-release.sh
        sudo systemctl restart docker
        hack/build-images.sh
        sed -i 's|go/src|data/src|' _output/local/releases/rpms/origin-local-release.repo
        sudo cp _output/local/releases/rpms/origin-local-release.repo /etc/yum.repos.d/
    - type: "script"
      title: "build an openshift-ansible release"
      repository: "openshift-ansible"
      script: |-
        tito_tmp_dir="tito"
        mkdir -p "${tito_tmp_dir}"
        tito tag --offline --accept-auto-changelog
        tito build --output="${tito_tmp_dir}" --rpm --test --offline --quiet
        createrepo "${tito_tmp_dir}/noarch"
        cat << EOR > ./openshift-ansible-local-release.repo
        [openshift-ansible-local-release]
        baseurl = file://$( pwd )/${tito_tmp_dir}/noarch
        gpgcheck = 0
        name = OpenShift Ansible Release from Local Source
        EOR
        sudo cp ./openshift-ansible-local-release.repo /etc/yum.repos.d
    - type: "script"
      title: "install the openshift-ansible release"
      script: |-
        sudo yum install -y atomic-openshift-utils
    - type: "script"
      title: "install Ansible plugins"
      repository: "origin"
      script: |-
        sudo yum install -y python-pip
        sudo pip install junit_xml
        sudo chmod o+rw /etc/environment
        echo "ANSIBLE_JUNIT_DIR=$( pwd )/_output/tests/ansible_junit" >> /etc/environment
        sudo mkdir -p /usr/share/ansible/plugins/callback
        for plugin in 'default_with_output_lists' 'generate_junit'; do
           wget "https://raw.githubusercontent.com/openshift/origin-ci-tool/master/oct/ansible/oct/callback_plugins/${plugin}.py"
           sudo mv "${plugin}.py" /usr/share/ansible/plugins/callback
        done
        sudo sed -r -i -e 's/^#?stdout_callback.*/stdout_callback = default_with_output_lists/' -e 's/^#?callback_whitelist.*/callback_whitelist = generate_junit/' /etc/ansible/ansible.cfg
    - type: "script"
      title: "check out the correct branch of aos-cd-jobs"
      repository: "aos-cd-jobs"
      script: |-
        git checkout sjb
    - type: "script"
      title: "determine the release commit for origin images and version for rpms"
      repository: "origin"
      script: |-
        jobs_repo="/data/src/github.com/openshift/aos-cd-jobs/"
        git log -1 --pretty=%h >> "${jobs_repo}/ORIGIN_COMMIT"
        ( source hack/lib/init.sh; os::build::rpm::get_nvra_vars; echo "-${OS_RPM_VERSION}-${OS_RPM_RELEASE}" ) >> "${jobs_repo}/ORIGIN_PKG_VERSION"
    - type: "script"
      title: "install origin"
      repository: "aos-cd-jobs"
      script: |-
        ansible-playbook -vv --become              \
                         --become-user root        \
                         --connection local        \
                         --inventory inventory/    \
                         -e deployment_type=origin \
                         /usr/share/ansible/openshift-ansible/playbooks/byo/openshift-node/network_manager.yml
        ansible-playbook -vv --become              \
                         --become-user root        \
                         --connection local        \
                         --inventory inventory/    \
                         -e deployment_type=origin \
                         -e openshift_pkg_version="$( cat ./ORIGIN_PKG_VERSION )"               \
                         -e oreg_url='openshift/origin-${component}:'"$( cat ./ORIGIN_COMMIT )" \
                         /usr/share/ansible/openshift-ansible/playbooks/byo/config.yml
    - type: "script"
      title: "expose the kubeconfig"
      script: |-
        sudo chmod a+x /etc/ /etc/origin/ /etc/origin/master/
        sudo chmod a+rw /etc/origin/master/admin.kubeconfig
    - type: "script"
      title: "run extended tests"
      repository: "origin"
      script: |-
        KUBECONFIG=/etc/origin/master/admin.kubeconfig TEST_ONLY='true' JUNIT_REPORT='true' make test-extended SUITE=conformance
  system_journals:
    - origin-master.service
    - origin-node.service
    - openvswitch.service
    - ovs-vswitchd.service
    - ovsdb-server.service
    - etcd.service