---
parent: 'common/test_cases/origin_minimal.yml'
extensions:
  actions:
    - type: "script"
      title: "build an origin release"
      repository: "origin"
      timeout: 7200
      script: |-
        ORIGIN_TARGET_BRANCH=$(git rev-parse --abbrev-ref --symbolic-full-name HEAD)
        export OS_BUILD_IMAGE_ARGS=''
        export OS_ONLY_BUILD_PLATFORMS="linux/amd64"
        export OS_BUILD_ENV_PRESERVE="_output/local"
        hack/build-base-images.sh
        # TODO: Remove once we stop developing on these release branches.
        if [[ "${ORIGIN_TARGET_BRANCH}" == release-1.[4-5] ]]; then
          hack/build-release.sh
          hack/build-images.sh
          hack/extract-release.sh
        else
          # Catch-all for master and future release branches.
          OS_BUILD_ENV_PULL_IMAGE=true hack/env make release BUILD_TESTS=1 #OS_BUILD_SRPM=1 # disabled due to OOM in docker
          sed -i 's|go/src|data/src|' _output/local/releases/rpms/origin-local-release.repo
          sudo cp _output/local/releases/rpms/origin-local-release.repo /etc/yum.repos.d/
        fi
        # docker seems to have a bunch of memory leaks, so let's
        # give it a new address space before testing starts
        sudo systemctl restart docker.service
    - type: "script"
      title: "determine the release commit for origin images and version for rpms"
      timeout: 600
      repository: "origin"
      script: |-
        jobs_repo="/data/src/github.com/openshift/aos-cd-jobs/"
        git log -1 --pretty=%h > "${jobs_repo}/ORIGIN_COMMIT"

        source hack/lib/init.sh
        os::build::rpm::get_nvra_vars
        echo "-${OS_RPM_VERSION}-${OS_RPM_RELEASE}" > "${jobs_repo}/ORIGIN_PKG_VERSION"
        echo "${OS_GIT_MAJOR}.${OS_GIT_MINOR}" | sed "s/+//" > "${jobs_repo}/ORIGIN_RELEASE"
        echo "${OS_RPM_VERSION}" | cut -d'.' -f2 > "${jobs_repo}/ORIGIN_PKG_MINOR_VERSION"
        tag="$( echo "v${OS_GIT_MAJOR}.${OS_GIT_MINOR}" | sed "s/+//" )"
        echo "${tag}" > "${jobs_repo}/ORIGIN_TAG"
