#!/usr/bin/env groovy

node {
    checkout scm
    def buildlib = load("pipeline-scripts/buildlib.groovy")
    def commonlib = buildlib.commonlib
    commonlib.describeJob("accept_rc", """
        <h2>Accept a release on Release Controller by fixing upgrade tests</h2>
    """)

    // Expose properties for a parameterized build
    properties(
        [
            buildDiscarder(
                logRotator(
                    artifactDaysToKeepStr: '7',
                    daysToKeepStr: '7'
                )
            ),
            [
                $class: 'ParametersDefinitionProperty',
                parameterDefinitions: [
                    string(
                        name: 'RELEASE_NAME',
                        description: 'Release name (e.g 4.10.4). Arch is amd64 by default.',
                        trim: true,
                        defaultValue: ""
                    ),
                    string(
                        name: 'UPGRADE_URL',
                        description: 'URL to successful upgrade job',
                        trim: true,
                        defaultValue: ""
                    ),
                    string(
                        name: 'UPGRADE_MINOR_URL',
                        description: 'URL to successful upgrade-minor job',
                        trim: true,
                        defaultValue: ""
                    ),
                    booleanParam(
                        name: 'CONFIRM',
                        description: 'Running without this would be a [dry-run]. Must be specified to apply changes to server',
                        defaultValue: false
                    ),
                    commonlib.mockParam(),
                ]
            ],
        ]
    )

    commonlib.checkMock()

    if (!params.RELEASE_NAME || !(params.UPGRADE_URL || params.UPGRADE_MINOR_URL)) {
        error("You must provide a release name and atleast one upgrade test url")
    }

    def upgrade_param = params.UPGRADE_URL ? "--upgrade-url ${params.UPGRADE_URL}" : ''
    def upgrade_minor_param = params.UPGRADE_MINOR_URL ? "--upgrade-minor-url ${params.UPGRADE_MINOR_URL}" : ''
    def confirm_param = params.CONFIRM ? "--confirm" : ''
    
    withEnv(['KUBECONFIG=/home/jenkins/kubeconfigs/art-publish.app.ci.kubeconfig']) {
        res = commonlib.shell(
            returnAll: true,
            script: """
                hacks/release_controller/accept.py --release ${params.RELEASE_NAME} ${upgrade_param} ${upgrade_minor_param} ${confirm_param}
            """,
        )
    }
    print(res)
    buildlib.cleanWorkspace()
}
