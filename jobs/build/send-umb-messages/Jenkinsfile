#!/usr/bin/env groovy

node {
    properties([
            buildDiscarder(
                logRotator(
                    artifactDaysToKeepStr: '',
                    artifactNumToKeepStr: '',
                    daysToKeepStr: '30',
                    numToKeepStr: ''
                )
            ),
            disableConcurrentBuilds(),
    ])

    // we only care to publish messages for the following releases
    releases = ["4-stable", "4.2.0-0.nightly", "4.1.0-0.nightly"]
    currentBuild.description = ""
    currentBuild.displayName = ""

    stage("send UMB messages for new releases") {
        dir ("/mnt/nfs/home/jenkins/.cache/releases") {
            for (String release : releases) {
                latestRelease = sh(
                    returnStdout: true,
                    script: "curl -s https://openshift-release.svc.ci.openshift.org/api/v1/releasestream/${release}/latest",
                ).trim()
                try {
                    previousRelease = readFile("${release}.current")
                } catch (readex) {
                    // The first time this job is ran and the first
                    // time any new release is added the 'readFile'
                    // won't find the file and will raise a
                    // NoSuchFileException exception.
                    touch file: "${release}.current"
                    previousRelease = ""
                }

                if ( latestRelease != previousRelease ) {
                    currentBuild.displayName += "ðŸ†•: ${release} "
                    currentBuild.description += "\nðŸ†•: ${release}"

                    def object = readJSON text: latestRelease

                    def downloadURL = object.downloadURL
                    def version = object.name
                    def pullRef = object.pullSpec
                    def digest = "MISSING_DIGEST_FIX_PLEASE"
                    string repo = "somerepo"

                    def ts = sh (
                        returnStdout: true,
                        script: 'date "+%Y-%m-%d\'T\'%H:%M:%S.%N\'Z\'"',
                    ).trim()

                    def msg = [
                            artifact: [
                                type: "container-image",
                                repository: "${repo}",
                                digest: "${digest}",
                                issuer: "OpenShift Automated Release Team",
                                pull_ref: "${pullRef}",
                                scratch: false,
                                id: "${repo}@${digest}",
                            ],
                            contact: [
                                name: "Nightly-pipeline for OCP 4.x",
                                team: "AOS QE",
                                docs: "https://somewhere.com/user-documentation",
                                email: "aos-qe@redhat.com",
                                irc: "#aos-qe"
                            ],
                            decision: [
                                result: "go",
                                summary: "1 of 1 required tests passed",
                                url: "https://datagrepper.somewhere.com/id?id=2018-21cc85d6"
                            ],
                            generated_at: "${ts}",
                            version: "${version}",
                            downloadURL: "${downloadURL}"
                        ]

                    def json = groovy.json.JsonOutput.toJson(msg)
                    json = groovy.json.JsonOutput.prettyPrint(json)

                    sendCIMessage(
                        messageProperties: "release=${release}",
                        messageContent: json,
                        messageType: 'Custom',
                        failOnError: true,
                        overrides: [topic: 'VirtualTopic.qe.ci.jenkins'],
                        providerName: 'Red Hat UMB'
                    )
                    writeFile file: "${release}.current", text: "${latestRelease}"
                } else {
                    currentBuild.description += "\nUnchanged: ${release}"
                }
            }
        }
    }
}
