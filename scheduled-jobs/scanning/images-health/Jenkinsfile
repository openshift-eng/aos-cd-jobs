properties([
    buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '100')),
    disableConcurrentBuilds(),
    disableResume(),
])

description = ""
failed = false

def runFor(version) {
    try {
        timeout(activity: true, time: 60, unit: 'MINUTES') {
            b = build(
                job: '../scanning/scanning%2Fimages-health',
                parameters: [
                    string(name: 'BUILD_VERSION', value: version),
                    booleanParam(name: 'SEND_TO_RELEASE_CHANNEL', value: true),
                    booleanParam(name: 'SEND_TO_FORUM_OCP_ART', value: false),
                ],
                propagate: false,
            )
            description += "${version} - ${b.result}\n"
            failed |= (b.result != "SUCCESS")
        }
    } catch(te) {
        description += "${version - ERROR}\n"
        failed = true
    }
}

@NonCPS
def sortedVersions() {
    return commonlib.ocpVersions.sort(false)
}

node() {
    checkout scm
    buildlib = load("pipeline-scripts/buildlib.groovy")
    commonlib = buildlib.commonlib

    commonlib.shell('sudo systemctl restart stunnel')

    for ( String version : sortedVersions() ) {
        runFor(version)
    }
    buildlib.cleanWorkspace()
}

currentBuild.description = description.trim()
currentBuild.result = failed ? "FAILURE" : "SUCCESS"
