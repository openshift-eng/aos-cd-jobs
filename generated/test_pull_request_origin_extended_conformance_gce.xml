<?xml version='1.0' encoding='UTF-8'?>
<com.tikal.jenkins.plugins.multijob.MultiJobProject plugin="jenkins-multijob-plugin@1.21">
  <actions/>
  <description>&lt;div style=&quot;font-size: 32px; line-height: 1.5em; background-color: yellow; padding: 5px;&quot;&gt;WARNING: THIS IS AN AUTO-GENERATED JOB DEFINITION. CHANGES MADE USING THE ONLINE EDITOR WILL NOT BE HONORED. MAKE CHANGES TO THE JOB DEFINITIONS IN THE &lt;a href=&#34;https://github.com/openshift/aos-cd-jobs/tree/sjb&#34;&gt;openshift/aos-cd-jobs&lt;/a&gt; REPOSITORY INSTEAD.&lt;/div&gt;</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.25">
      <autoRebuild>true</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>7</daysToKeep>
        <numToKeep>-1</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>SUITE</name>
          <description>Which shell file in the &lt;a href=&#39;https://github.com/openshift/origin/tree/master/test/extended&#39;&gt;&lt;code&gt;origin/test/extended/&lt;/code&gt;&lt;/a&gt; di rectory to run.</description>
          <defaultValue>conformance</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>FOCUS</name>
          <description>Literal string to pass to &lt;code&gt;--ginkgo.focus&lt;/code&gt;</description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>DOCKER_STORAGE_DRIVER</name>
          <description>The storage driver to use when configuring the cluster. &#39;overlay2&#39; and &#39;devicemapper&#39; are allowed.
</description>
          <defaultValue>overlay2</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>OPENSHIFT_ANSIBLE_IMAGE</name>
          <description>The image to install the cluster with. If set, defaults to the value defined by the &lt;a href=&#39;https://github.com/openshift/release/blob/master/cluster/bin/local.sh&#39;&gt;&lt;code&gt;cluster/bin/local.sh&lt;/code&gt;&lt;/a&gt; script.
</description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>ADDITIONAL_SKIP</name>
          <description>Regular expression to filter additional tests from the conformance suite.
See also:
&lt;div&gt;
&lt;a style=&#34;display: block&#34; href=&#39;https://github.com/openshift/openshift-ansible/pull/3017&#39;&gt;&lt;code&gt;openshift-ansible&lt;/code&gt; pull 3017&lt;/a&gt;&lt;/br&gt;
&lt;a style=&#34;display: block&#34; href=&#39;https://github.com/openshift/origin/issues/12361&#39;&gt;&lt;code&gt;origin&lt;/code&gt; issue 12361&lt;/a&gt;&lt;/br&gt;
&lt;a style=&#34;display: block&#34; href=&#39;https://github.com/openshift/origin/issues/12362&#39;&gt;&lt;code&gt;origin&lt;/code&gt; issue 12362&lt;/a&gt;&lt;/br&gt;
&lt;a style=&#34;display: block&#34; href=&#39;https://github.com/openshift/origin/issues/12784&#39;&gt;&lt;code&gt;origin&lt;/code&gt; issue 12784&lt;/a&gt;&lt;/br&gt;
&lt;a style=&#34;display: block&#34; href=&#39;https://github.com/openshift/origin/issues/12629&#39;&gt;&lt;code&gt;origin&lt;/code&gt; issue 12629&lt;/a&gt;&lt;/br&gt;
&lt;a style=&#34;display: block&#34; href=&#39;https://github.com/openshift/origin/issues/11016&#39;&gt;&lt;code&gt;origin&lt;/code&gt; issue 11016&lt;/a&gt;&lt;/br&gt;
&lt;a style=&#34;display: block&#34; href=&#39;https://github.com/kubernetes/kubernetes/issues/40953&#39;&gt;&lt;code&gt;kubernetes&lt;/code&gt; issue 40953&lt;/a&gt;&lt;/br&gt;
&lt;a style=&#34;display: block&#34; href=&#39;https://github.com/openshift/origin/issues/12072&#39;&gt;&lt;code&gt;origin&lt;/code&gt; issue 12072&lt;/a&gt;&lt;/br&gt;
&lt;/div&gt;</description>
          <defaultValue>|should provide DNS for services|should support subPath|should work with TCP \(when fully idled\)|should test kubelet managed /etc/hosts file|\[networking\]\[router\]|Downward API volume should update annotations on modification|should run a deployment to completion and then scale to zero|Basic StatefulSet functionality Scaling down before scale up is finished should wait until current pod will be running and ready before it will be removed|Probing container should \*not\* be restarted with a /healthz http liveness probe</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>ORIGIN_TARGET_BRANCH</name>
          <description>The branch in the &lt;a href=&quot;https://github.com/openshift/origin&quot;&gt;origin&lt;/a&gt; repository to test against.</description>
          <defaultValue>master</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>ORIGIN_PULL_ID</name>
          <description>The pull-request in the &lt;a href=&quot;https://github.com/openshift/origin&quot;&gt;origin&lt;/a&gt; repository to test.</description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>RELEASE_TARGET_BRANCH</name>
          <description>The branch in the &lt;a href=&quot;https://github.com/openshift/release&quot;&gt;release&lt;/a&gt; repository to test against.</description>
          <defaultValue>master</defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@1.9.0">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <authToken>origin1</authToken>
  <triggers/>
  <concurrentBuild>true</concurrentBuild>
  <builders>
        <hudson.tasks.Shell>
          <command>#!/bin/bash
echo &#34;########## STARTING STAGE: INSTALL THE ORIGIN-CI-TOOL ##########&#34; &amp;&amp; trap &#39;export status=FAILURE&#39; ERR &amp;&amp; trap &#39;set +o xtrace; echo &#34;########## FINISHED STAGE: ${status:-SUCCESS}: INSTALL THE ORIGIN-CI-TOOL ##########&#34;&#39; EXIT &amp;&amp; set -o errexit -o nounset -o pipefail -o xtrace &amp;&amp; if [[ -s &#34;${WORKSPACE}/activate&#34; ]]; then source &#34;${WORKSPACE}/activate&#34;; fi
latest=&#34;$( readlink &#34;${HOME}/origin-ci-tool/latest&#34; )&#34;
touch &#34;${latest}&#34;
cp &#34;${latest}/bin/activate&#34; &#34;${WORKSPACE}/activate&#34;
cat &gt;&gt; &#34;${WORKSPACE}/activate&#34; &lt;&lt;EOF
export OCT_CONFIG_HOME=&#34;${WORKSPACE}/.config&#34;
EOF

source &#34;${WORKSPACE}/activate&#34;
mkdir -p &#34;${OCT_CONFIG_HOME}&#34;
rm -rf &#34;${OCT_CONFIG_HOME}/origin-ci-tool&#34;
oct configure ansible-client verbosity 2
oct configure aws-client &#39;keypair_name&#39; &#39;libra&#39;
oct configure aws-client &#39;private_key_path&#39; &#39;/var/lib/jenkins/.ssh/devenv.pem&#39;</command>
        </hudson.tasks.Shell>
        <hudson.tasks.Shell>
          <command>#!/bin/bash
echo &#34;########## STARTING STAGE: PROVISION CLOUD RESOURCES ##########&#34; &amp;&amp; trap &#39;export status=FAILURE&#39; ERR &amp;&amp; trap &#39;set +o xtrace; echo &#34;########## FINISHED STAGE: ${status:-SUCCESS}: PROVISION CLOUD RESOURCES ##########&#34;&#39; EXIT &amp;&amp; set -o errexit -o nounset -o pipefail -o xtrace &amp;&amp; if [[ -s &#34;${WORKSPACE}/activate&#34; ]]; then source &#34;${WORKSPACE}/activate&#34;; fi
oct provision remote all-in-one --os &#34;rhel&#34; --stage &#34;base&#34; --provider &#34;aws&#34; --discrete-ssh-config --name &#34;${JOB_NAME}_${BUILD_NUMBER}&#34; </command>
        </hudson.tasks.Shell>
    <hudson.plugins.descriptionsetter.DescriptionSetterBuilder plugin="description-setter@1.10">
      <regexp></regexp>
      <description>&lt;div&gt;
Using PR &lt;a href=&#34;https://github.com/openshift/origin/pull/${ORIGIN_PULL_ID}&#34;&gt;${ORIGIN_PULL_ID}&lt;/a&gt; merged into the &lt;a href=&#34;https://github.com/openshift/origin/tree/${ORIGIN_TARGET_BRANCH}&#34;&gt;origin ${ORIGIN_TARGET_BRANCH}&lt;/a&gt; branch.&lt;br/&gt;
Using the &lt;a href=&#34;https://github.com/openshift/release/tree/${RELEASE_TARGET_BRANCH}&#34;&gt;release ${RELEASE_TARGET_BRANCH}&lt;/a&gt; branch.
&lt;/div&gt;</description>
    </hudson.plugins.descriptionsetter.DescriptionSetterBuilder>
        <hudson.tasks.Shell>
          <command>#!/bin/bash
echo &#34;########## STARTING STAGE: SYNC ORIGIN REPOSITORY ##########&#34; &amp;&amp; trap &#39;export status=FAILURE&#39; ERR &amp;&amp; trap &#39;set +o xtrace; echo &#34;########## FINISHED STAGE: ${status:-SUCCESS}: SYNC ORIGIN REPOSITORY ##########&#34;&#39; EXIT &amp;&amp; set -o errexit -o nounset -o pipefail -o xtrace &amp;&amp; if [[ -s &#34;${WORKSPACE}/activate&#34; ]]; then source &#34;${WORKSPACE}/activate&#34;; fi
oct sync remote origin --branch &#34;${ORIGIN_TARGET_BRANCH}&#34; </command>
        </hudson.tasks.Shell>
        <hudson.tasks.Shell>
          <command>#!/bin/bash
echo &#34;########## STARTING STAGE: SYNC ORIGIN PULL REQUEST ${ORIGIN_PULL_ID} ##########&#34; &amp;&amp; trap &#39;export status=FAILURE&#39; ERR &amp;&amp; trap &#39;set +o xtrace; echo &#34;########## FINISHED STAGE: ${status:-SUCCESS}: SYNC ORIGIN PULL REQUEST ${ORIGIN_PULL_ID} ##########&#34;&#39; EXIT &amp;&amp; set -o errexit -o nounset -o pipefail -o xtrace &amp;&amp; if [[ -s &#34;${WORKSPACE}/activate&#34; ]]; then source &#34;${WORKSPACE}/activate&#34;; fi
oct sync remote origin --refspec &#34;pull/${ORIGIN_PULL_ID}/head&#34; --branch &#34;pull-${ORIGIN_PULL_ID}&#34; --merge-into &#34;${ORIGIN_TARGET_BRANCH}&#34; </command>
        </hudson.tasks.Shell>
        <hudson.tasks.Shell>
          <command>#!/bin/bash
echo &#34;########## STARTING STAGE: SYNC RELEASE REPOSITORY ##########&#34; &amp;&amp; trap &#39;export status=FAILURE&#39; ERR &amp;&amp; trap &#39;set +o xtrace; echo &#34;########## FINISHED STAGE: ${status:-SUCCESS}: SYNC RELEASE REPOSITORY ##########&#34;&#39; EXIT &amp;&amp; set -o errexit -o nounset -o pipefail -o xtrace &amp;&amp; if [[ -s &#34;${WORKSPACE}/activate&#34; ]]; then source &#34;${WORKSPACE}/activate&#34;; fi
oct sync remote release --branch &#34;${RELEASE_TARGET_BRANCH}&#34; </command>
        </hudson.tasks.Shell>
        <hudson.tasks.Shell>
          <command>#!/bin/bash
echo &#34;########## STARTING STAGE: USE A RAMDISK FOR ETCD ##########&#34; &amp;&amp; trap &#39;export status=FAILURE&#39; ERR &amp;&amp; trap &#39;set +o xtrace; echo &#34;########## FINISHED STAGE: ${status:-SUCCESS}: USE A RAMDISK FOR ETCD ##########&#34;&#39; EXIT &amp;&amp; set -o errexit -o nounset -o pipefail -o xtrace &amp;&amp; if [[ -s &#34;${WORKSPACE}/activate&#34; ]]; then source &#34;${WORKSPACE}/activate&#34;; fi
{
cat &lt;&lt;EOF
sudo su origin
set -o errexit -o nounset -o pipefail -o xtrace
cd &#34;\${HOME}&#34;
sudo mkdir -p /tmp
sudo mount -t tmpfs -o size=2048m tmpfs /tmp
sudo restorecon -R /tmp
EOF
} | ssh -F ./.config/origin-ci-tool/inventory/.ssh_config openshiftdevel</command>
        </hudson.tasks.Shell>
        <hudson.tasks.Shell>
          <command>#!/bin/bash
echo &#34;########## STARTING STAGE: FORWARD PARAMETERS TO THE REMOTE HOST ##########&#34; &amp;&amp; trap &#39;export status=FAILURE&#39; ERR &amp;&amp; trap &#39;set +o xtrace; echo &#34;########## FINISHED STAGE: ${status:-SUCCESS}: FORWARD PARAMETERS TO THE REMOTE HOST ##########&#34;&#39; EXIT &amp;&amp; set -o errexit -o nounset -o pipefail -o xtrace &amp;&amp; if [[ -s &#34;${WORKSPACE}/activate&#34; ]]; then source &#34;${WORKSPACE}/activate&#34;; fi
ssh -F ./.config/origin-ci-tool/inventory/.ssh_config openshiftdevel sudo chmod o+rw /etc/environment
ssh -F ./.config/origin-ci-tool/inventory/.ssh_config openshiftdevel &#34;echo &#39;OPENSHIFT_ANSIBLE_IMAGE=${OPENSHIFT_ANSIBLE_IMAGE:-}&#39; &gt;&gt; /etc/environment&#34;
ssh -F ./.config/origin-ci-tool/inventory/.ssh_config openshiftdevel &#34;echo &#39;ADDITIONAL_SKIP=${ADDITIONAL_SKIP:-}&#39; &gt;&gt; /etc/environment&#34;
ssh -F ./.config/origin-ci-tool/inventory/.ssh_config openshiftdevel &#34;echo &#39;JOB_NAME=${JOB_NAME:-}&#39; &gt;&gt; /etc/environment&#34;
ssh -F ./.config/origin-ci-tool/inventory/.ssh_config openshiftdevel &#34;echo &#39;BUILD_NUMBER=${BUILD_NUMBER:-}&#39; &gt;&gt; /etc/environment&#34;
ssh -F ./.config/origin-ci-tool/inventory/.ssh_config openshiftdevel &#34;echo &#39;DOCKER_STORAGE_DRIVER=${DOCKER_STORAGE_DRIVER:-}&#39; &gt;&gt; /etc/environment&#34;
ssh -F ./.config/origin-ci-tool/inventory/.ssh_config openshiftdevel &#34;echo &#39;SUITE=${SUITE:-}&#39; &gt;&gt; /etc/environment&#34;
ssh -F ./.config/origin-ci-tool/inventory/.ssh_config openshiftdevel &#34;echo &#39;FOCUS=${FOCUS:-}&#39; &gt;&gt; /etc/environment&#34;
</command>
        </hudson.tasks.Shell>
        <hudson.tasks.Shell>
          <command>#!/bin/bash
echo &#34;########## STARTING STAGE: BUILD ORIGIN RPMS ##########&#34; &amp;&amp; trap &#39;export status=FAILURE&#39; ERR &amp;&amp; trap &#39;set +o xtrace; echo &#34;########## FINISHED STAGE: ${status:-SUCCESS}: BUILD ORIGIN RPMS ##########&#34;&#39; EXIT &amp;&amp; set -o errexit -o nounset -o pipefail -o xtrace &amp;&amp; if [[ -s &#34;${WORKSPACE}/activate&#34; ]]; then source &#34;${WORKSPACE}/activate&#34;; fi
{
cat &lt;&lt;EOF
sudo su origin
set -o errexit -o nounset -o pipefail -o xtrace
cd &#34;\${GOPATH}/src/github.com/openshift/origin&#34;
OS_BUILD_ENV_DOCKER_ARGS=&#34;-e OS_VERSION_FILE= &#34; OS_BUILD_ENV_PRESERVE=&#34;_output/local/releases/rpms:_output/local/bin&#34; hack/env make build-rpms BUILD_TESTS=1
EOF
} | ssh -F ./.config/origin-ci-tool/inventory/.ssh_config openshiftdevel</command>
        </hudson.tasks.Shell>
        <hudson.tasks.Shell>
          <command>#!/bin/bash
echo &#34;########## STARTING STAGE: MOVE RPMS TO GCS REPO ##########&#34; &amp;&amp; trap &#39;export status=FAILURE&#39; ERR &amp;&amp; trap &#39;set +o xtrace; echo &#34;########## FINISHED STAGE: ${status:-SUCCESS}: MOVE RPMS TO GCS REPO ##########&#34;&#39; EXIT &amp;&amp; set -o errexit -o nounset -o pipefail -o xtrace &amp;&amp; if [[ -s &#34;${WORKSPACE}/activate&#34; ]]; then source &#34;${WORKSPACE}/activate&#34;; fi
if [[ -n &#34;${ORIGIN_PULL_ID-}&#34; ]]; then
  location_base=&#34;origin-ci-test/pr-logs/${ORIGIN_PULL_ID}/${JOB_NAME}/${BUILD_NUMBER}&#34;
  location=&#34;${location_base}/artifacts/rpms&#34;
else
  location_root=&#34;origin-ci-test/branch-logs/origin/${ORIGIN_TARGET_BRANCH}/builds&#34;
  location_base=&#34;${location_root}/${BUILD_NUMBER}&#34;
  location=&#34;${location_base}/artifacts/rpms&#34;
  base_location_url=&#34;https://storage.googleapis.com/${location_base}&#34;
fi
location_url=&#34;https://storage.googleapis.com/${location}&#34;
echo &#34;${JOB_NAME}/${BUILD_NUMBER}&#34; &gt; .build
if gsutil ls &#34;gs://${location_base}&#34; &amp;&gt;/dev/null; then
  gsutil rm -rf &#34;gs://${location_base}&#34;
fi
gsutil cp .build &#34;gs://${location_base}/.build&#34;

mkdir -p artifacts/rpms
rsync --archive --omit-dir-times --rsh &#34;ssh -F ./.config/origin-ci-tool/inventory/.ssh_config&#34; --rsync-path=&#39;sudo rsync&#39; openshiftdevel:/data/src/github.com/openshift/origin/_output/local/releases/rpms ./artifacts/ || true
gsutil -m cp -r artifacts/rpms &#34;gs://${location}&#34;
if [[ -n &#34;${ORIGIN_PULL_ID:-}&#34; ]]; then
  # if we&#39;ve built this PR before, remove older rpm artifact directories
  out=&#34;$( gsutil ls -d &#34;gs://origin-ci-test/pr-logs/${ORIGIN_PULL_ID}/${JOB_NAME}/*/artifacts/rpms&#34; | sort -n -t / -k 7 | head -n -2 )&#34;
  if [[ -n &#34;${out}&#34; ]]; then
    echo &#34;${out}&#34; | xargs -L 1 gsutil rm -rf
  fi
else
  # update the pointer to this location
  echo &#34;${base_location_url}&#34; &gt; .latest
  gsutil cp .latest &#34;gs://${location_root}/.latest&#34;
fi

# hack around forwarding this to the other machine
ssh -F ./.config/origin-ci-tool/inventory/.ssh_config openshiftdevel &#34;echo &#39;location_url=${location_url:-}&#39; &gt;&gt; /etc/environment&#34;</command>
        </hudson.tasks.Shell>
        <hudson.tasks.Shell>
          <command>#!/bin/bash
echo &#34;########## STARTING STAGE: MOVE SECRETS TO REMOTE HOST ##########&#34; &amp;&amp; trap &#39;export status=FAILURE&#39; ERR &amp;&amp; trap &#39;set +o xtrace; echo &#34;########## FINISHED STAGE: ${status:-SUCCESS}: MOVE SECRETS TO REMOTE HOST ##########&#34;&#39; EXIT &amp;&amp; set -o errexit -o nounset -o pipefail -o xtrace &amp;&amp; if [[ -s &#34;${WORKSPACE}/activate&#34; ]]; then source &#34;${WORKSPACE}/activate&#34;; fi
rsync --copy-links --omit-dir-times --archive --rsh &#34;ssh -F ./.config/origin-ci-tool/inventory/.ssh_config&#34; /var/lib/jenkins/.gce/* openshiftdevel:/data/src/github.com/openshift/release/cluster/test-deploy/data/
ssh -F ./.config/origin-ci-tool/inventory/.ssh_config openshiftdevel &#39;sudo chown -R origin:origin-git /data/src/github.com/openshift/release/cluster/test-deploy/data/&#39;
ssh -F ./.config/origin-ci-tool/inventory/.ssh_config openshiftdevel &#39;sudo chmod -R ug+rwX /data/src/github.com/openshift/release/cluster/test-deploy/data/&#39;</command>
        </hudson.tasks.Shell>
        <hudson.tasks.Shell>
          <command>#!/bin/bash
echo &#34;########## STARTING STAGE: PROVISION TEST CLUSTER ##########&#34; &amp;&amp; trap &#39;export status=FAILURE&#39; ERR &amp;&amp; trap &#39;set +o xtrace; echo &#34;########## FINISHED STAGE: ${status:-SUCCESS}: PROVISION TEST CLUSTER ##########&#34;&#39; EXIT &amp;&amp; set -o errexit -o nounset -o pipefail -o xtrace &amp;&amp; if [[ -s &#34;${WORKSPACE}/activate&#34; ]]; then source &#34;${WORKSPACE}/activate&#34;; fi
{
cat &lt;&lt;EOF
sudo su origin
set -o errexit -o nounset -o pipefail -o xtrace
cd &#34;\${GOPATH}/src/github.com/openshift/release&#34;
cd cluster/test-deploy/data/
if [[ -n &#34;\${OPENSHIFT_ANSIBLE_IMAGE}&#34; ]]; then
  docker pull &#34;\${OPENSHIFT_ANSIBLE_IMAGE}&#34;
  docker tag &#34;\${OPENSHIFT_ANSIBLE_IMAGE}&#34; &#34;openshift/origin-gce:latest&#34;
fi

# we need a short but unique identifier, so we take the first 7 of SHA
hashed_identifier=&#34;\$( echo &#34;\${JOB_NAME}&#34; | sha1sum )&#34;
export INSTANCE_PREFIX=&#34;prtest-\${hashed_identifier:0:7}-\${BUILD_NUMBER}&#34;
echo &#34;INSTANCE_PREFIX=\${INSTANCE_PREFIX}&#34; &gt;&gt; /etc/environment

../../bin/local.sh ansible-playbook -e &#34;provision_gce_docker_storage_driver=\${DOCKER_STORAGE_DRIVER}&#34; -e &#34;openshift_test_repo=\${location_url}&#34; playbooks/launch.yaml
cp admin.kubeconfig /tmp/cluster-admin.kubeconfig
EOF
} | ssh -F ./.config/origin-ci-tool/inventory/.ssh_config openshiftdevel</command>
        </hudson.tasks.Shell>
        <hudson.tasks.Shell>
          <command>#!/bin/bash
echo &#34;########## STARTING STAGE: RUN EXTENDED TESTS ##########&#34; &amp;&amp; trap &#39;export status=FAILURE&#39; ERR &amp;&amp; trap &#39;set +o xtrace; echo &#34;########## FINISHED STAGE: ${status:-SUCCESS}: RUN EXTENDED TESTS ##########&#34;&#39; EXIT &amp;&amp; set -o errexit -o nounset -o pipefail -o xtrace &amp;&amp; if [[ -s &#34;${WORKSPACE}/activate&#34; ]]; then source &#34;${WORKSPACE}/activate&#34;; fi
{
cat &lt;&lt;EOF
sudo su origin
set -o errexit -o nounset -o pipefail -o xtrace
cd &#34;\${GOPATH}/src/github.com/openshift/origin&#34;
mkdir -p /tmp/artifacts/junit
export KUBECONFIG=/tmp/cluster-admin.kubeconfig
export PARALLEL_NODES=25
export EXTENDED_TEST_PATH=test/extended
export TEST_ONLY=1
export JUNIT_REPORT=true
export TEST_EXTENDED_SKIP=&#34;\[local\]&#34;
TEST_EXTENDED_SKIP+=&#34;\${ADDITIONAL_SKIP-}&#34;
export GOOGLE_APPLICATION_CREDENTIALS=&#34;/data/src/github.com/openshift/release/cluster/test-deploy/data/gce.json&#34;
export TEST_EXTENDED_ARGS=&#39;-provider=gce -gce-zone=us-central1-a -gce-project=openshift-gce-devel-ci&#39;

function gather() {
  set +e
  hack/build-go.sh cmd/oc
  export PATH=\$(pwd)/_output/local/bin/linux/amd64:\$PATH
  oc get nodes --template &#39;{{ range .items }}{{ .metadata.name }}{{ &#34;\n&#34; }}{{ end }}&#39; | xargs -L 1 -I X bash -c &#39;oc get --raw /api/v1/nodes/X/proxy/metrics &gt; /tmp/artifacts/X.metrics&#39; &#39;&#39;
  oc get --raw /metrics &gt; /tmp/artifacts/master.metrics
  set -e
}
trap gather EXIT

# rosie-bot does not know how to split suite and focus
# so we need to detect that she is doing her best and
# help her out by parsing the input she gives
if [[ -z &#34;\${FOCUS:-}&#34; &amp;&amp; &#34;\${SUITE}&#34; =~ ^(.*)\((.*)\)\$ ]]; then
  SUITE=&#34;\${BASH_REMATCH[1]}&#34;
  FOCUS=&#34;\${BASH_REMATCH[2]}&#34;
fi
make test-extended SUITE=&#34;\${SUITE}&#34; FOCUS=&#34;\${FOCUS:-}&#34;
EOF
} | ssh -F ./.config/origin-ci-tool/inventory/.ssh_config openshiftdevel</command>
        </hudson.tasks.Shell>
  </builders>
  <publishers>
    <org.jenkinsci.plugins.postbuildscript.PostBuildScript plugin="postbuildscript@0.17">
      <buildSteps>
        <hudson.tasks.Shell>
          <command>#!/bin/bash
echo &#34;########## STARTING STAGE: DOWNLOAD ARTIFACTS FROM THE REMOTE HOST ##########&#34; &amp;&amp; trap &#39;export status=FAILURE&#39; ERR &amp;&amp; trap &#39;set +o xtrace; echo &#34;########## FINISHED STAGE: ${status:-SUCCESS}: DOWNLOAD ARTIFACTS FROM THE REMOTE HOST ##########&#34;&#39; EXIT &amp;&amp; set -o errexit -o nounset -o pipefail -o xtrace &amp;&amp; if [[ -s &#34;${WORKSPACE}/activate&#34; ]]; then source &#34;${WORKSPACE}/activate&#34;; fi
ARTIFACT_DIR=&#34;$( pwd )/artifacts&#34;
rm -rf &#34;${ARTIFACT_DIR}&#34;
mkdir &#34;${ARTIFACT_DIR}&#34;
if ssh -F ./.config/origin-ci-tool/inventory/.ssh_config openshiftdevel sudo stat /tmp/openshift; then
    ssh -F ./.config/origin-ci-tool/inventory/.ssh_config openshiftdevel sudo chmod -R o+rX /tmp/openshift
    scp -r -F ./.config/origin-ci-tool/inventory/.ssh_config openshiftdevel:/tmp/openshift &#34;${ARTIFACT_DIR}&#34;
fi
if ssh -F ./.config/origin-ci-tool/inventory/.ssh_config openshiftdevel sudo stat /data/src/github.com/openshift/origin/_output/tests; then
    ssh -F ./.config/origin-ci-tool/inventory/.ssh_config openshiftdevel sudo chmod -R o+rX /data/src/github.com/openshift/origin/_output/tests
    scp -r -F ./.config/origin-ci-tool/inventory/.ssh_config openshiftdevel:/data/src/github.com/openshift/origin/_output/tests &#34;${ARTIFACT_DIR}&#34;
fi
if ssh -F ./.config/origin-ci-tool/inventory/.ssh_config openshiftdevel sudo stat /tmp/artifacts; then
    ssh -F ./.config/origin-ci-tool/inventory/.ssh_config openshiftdevel sudo chmod -R o+rX /tmp/artifacts
    scp -r -F ./.config/origin-ci-tool/inventory/.ssh_config openshiftdevel:/tmp/artifacts &#34;${ARTIFACT_DIR}&#34;
fi
tree &#34;${ARTIFACT_DIR}&#34; </command>
        </hudson.tasks.Shell>
        <hudson.tasks.Shell>
          <command>#!/bin/bash
echo &#34;########## STARTING STAGE: GENERATE ARTIFACTS FROM THE REMOTE HOST ##########&#34; &amp;&amp; trap &#39;export status=FAILURE&#39; ERR &amp;&amp; trap &#39;set +o xtrace; echo &#34;########## FINISHED STAGE: ${status:-SUCCESS}: GENERATE ARTIFACTS FROM THE REMOTE HOST ##########&#34;&#39; EXIT &amp;&amp; set -o errexit -o nounset -o pipefail -o xtrace &amp;&amp; if [[ -s &#34;${WORKSPACE}/activate&#34; ]]; then source &#34;${WORKSPACE}/activate&#34;; fi
ARTIFACT_DIR=&#34;$( pwd )/artifacts/generated&#34;
rm -rf &#34;${ARTIFACT_DIR}&#34;
mkdir &#34;${ARTIFACT_DIR}&#34;
ssh -F ./.config/origin-ci-tool/inventory/.ssh_config openshiftdevel &#34;sudo docker version &amp;&amp; sudo docker info &amp;&amp; sudo docker images &amp;&amp; sudo docker ps -a 2&gt;&amp;1&#34; &gt;&gt; &#34;${ARTIFACT_DIR}/docker.info&#34; || true
ssh -F ./.config/origin-ci-tool/inventory/.ssh_config openshiftdevel &#34;sudo yum list installed 2&gt;&amp;1&#34; &gt;&gt; &#34;${ARTIFACT_DIR}/installed_packages.log&#34; || true
ssh -F ./.config/origin-ci-tool/inventory/.ssh_config openshiftdevel &#34;sudo ausearch -m avc 2&gt;&amp;1&#34; &gt;&gt; &#34;${ARTIFACT_DIR}/avc_denials.log&#34; || true
ssh -F ./.config/origin-ci-tool/inventory/.ssh_config openshiftdevel &#34;sudo journalctl _PID=1 --no-pager --all --lines=all 2&gt;&amp;1&#34; &gt;&gt; &#34;${ARTIFACT_DIR}/pid1.journal&#34; || true
tree &#34;${ARTIFACT_DIR}&#34; </command>
        </hudson.tasks.Shell>
        <hudson.tasks.Shell>
          <command>#!/bin/bash
echo &#34;########## STARTING STAGE: FETCH SYSTEMD JOURNALS FROM THE REMOTE HOST ##########&#34; &amp;&amp; trap &#39;export status=FAILURE&#39; ERR &amp;&amp; trap &#39;set +o xtrace; echo &#34;########## FINISHED STAGE: ${status:-SUCCESS}: FETCH SYSTEMD JOURNALS FROM THE REMOTE HOST ##########&#34;&#39; EXIT &amp;&amp; set -o errexit -o nounset -o pipefail -o xtrace &amp;&amp; if [[ -s &#34;${WORKSPACE}/activate&#34; ]]; then source &#34;${WORKSPACE}/activate&#34;; fi
ARTIFACT_DIR=&#34;$( pwd )/artifacts/journals&#34;
rm -rf &#34;${ARTIFACT_DIR}&#34;
mkdir &#34;${ARTIFACT_DIR}&#34;
ssh -F ./.config/origin-ci-tool/inventory/.ssh_config openshiftdevel sudo journalctl --unit docker.service --no-pager --all --lines=all &gt;&gt; &#34;${ARTIFACT_DIR}/docker.service&#34;
tree &#34;${ARTIFACT_DIR}&#34; </command>
        </hudson.tasks.Shell>
        <hudson.tasks.Shell>
          <command>#!/bin/bash
echo &#34;########## STARTING STAGE: DEPROVISION TEST CLUSTER ##########&#34; &amp;&amp; trap &#39;export status=FAILURE&#39; ERR &amp;&amp; trap &#39;set +o xtrace; echo &#34;########## FINISHED STAGE: ${status:-SUCCESS}: DEPROVISION TEST CLUSTER ##########&#34;&#39; EXIT &amp;&amp; set -o errexit -o nounset -o pipefail -o xtrace &amp;&amp; if [[ -s &#34;${WORKSPACE}/activate&#34; ]]; then source &#34;${WORKSPACE}/activate&#34;; fi
{
cat &lt;&lt;EOF
sudo su origin
set -o errexit -o nounset -o pipefail -o xtrace
cd &#34;\${GOPATH}/src/github.com/openshift/release&#34;
cd cluster/test-deploy/data
../../bin/local.sh ansible-playbook playbooks/terminate.yaml
EOF
} | ssh -F ./.config/origin-ci-tool/inventory/.ssh_config openshiftdevel</command>
        </hudson.tasks.Shell>
        <hudson.tasks.Shell>
          <command>#!/bin/bash
echo &#34;########## STARTING STAGE: DEPROVISION CLOUD RESOURCES ##########&#34; &amp;&amp; trap &#39;export status=FAILURE&#39; ERR &amp;&amp; trap &#39;set +o xtrace; echo &#34;########## FINISHED STAGE: ${status:-SUCCESS}: DEPROVISION CLOUD RESOURCES ##########&#34;&#39; EXIT &amp;&amp; set -o errexit -o nounset -o pipefail -o xtrace &amp;&amp; if [[ -s &#34;${WORKSPACE}/activate&#34; ]]; then source &#34;${WORKSPACE}/activate&#34;; fi
oct deprovision</command>
        </hudson.tasks.Shell>
      </buildSteps>
      <scriptOnlyIfSuccess>false</scriptOnlyIfSuccess>
      <scriptOnlyIfFailure>false</scriptOnlyIfFailure>
      <markBuildUnstable>false</markBuildUnstable>
    </org.jenkinsci.plugins.postbuildscript.PostBuildScript>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>.config/origin-ci-tool/logs/junit/*.xml,artifacts/**/*.xml</artifacts>
      <allowEmptyArchive>true</allowEmptyArchive>
      <onlyIfSuccessful>false</onlyIfSuccessful>
      <fingerprint>false</fingerprint>
      <defaultExcludes>true</defaultExcludes>
      <caseSensitive>true</caseSensitive>
    </hudson.tasks.ArtifactArchiver>
    <hudson.tasks.junit.JUnitResultArchiver plugin="junit@1.13">
      <testResults>.config/origin-ci-tool/logs/junit/*.xml,**/*.xml</testResults>
      <keepLongStdio>true</keepLongStdio>
      <healthScaleFactor>1.0</healthScaleFactor>
      <allowEmptyResults>true</allowEmptyResults>
    </hudson.tasks.junit.JUnitResultArchiver>
    <hudson.plugins.s3.S3BucketPublisher plugin="s3@0.10.11-SNAPSHOT">
      <profileName>Jenkins-AWS</profileName>
      <entries>
        <hudson.plugins.s3.Entry>
          <bucket>aos-ci/jenkinsorigin</bucket>
          <sourceFile>artifacts/**, .config/origin-ci-tool/**</sourceFile>
          <excludedFile></excludedFile>
          <storageClass>STANDARD</storageClass>
          <selectedRegion>us-east-1</selectedRegion>
          <noUploadOnFailure>false</noUploadOnFailure>
          <uploadFromSlave>false</uploadFromSlave>
          <managedArtifacts>true</managedArtifacts>
          <useServerSideEncryption>false</useServerSideEncryption>
          <flatten>false</flatten>
          <gzipFiles>false</gzipFiles>
          <showDirectlyInBrowser>false</showDirectlyInBrowser>
          <keepForever>false</keepForever>
        </hudson.plugins.s3.Entry>
      </entries>
      <dontWaitForConcurrentBuildCompletion>true</dontWaitForConcurrentBuildCompletion>
      <consoleLogLevel>
        <name>WARNING</name>
        <value>900</value>
        <resourceBundleName>sun.util.logging.resources.logging</resourceBundleName>
      </consoleLogLevel>
      <pluginFailureResultConstraint>
        <name>SUCCESS</name>
        <ordinal>0</ordinal>
        <color>BLUE</color>
        <completeBuild>true</completeBuild>
      </pluginFailureResultConstraint>
      <userMetadata/>
    </hudson.plugins.s3.S3BucketPublisher>
  </publishers>
  <buildWrappers>
    <hudson.plugins.ws__cleanup.PreBuildCleanup plugin="ws-cleanup@0.32">
      <deleteDirs>false</deleteDirs>
      <cleanupParameter></cleanupParameter>
      <externalDelete></externalDelete>
    </hudson.plugins.ws__cleanup.PreBuildCleanup>
    <hudson.plugins.ansicolor.AnsiColorBuildWrapper plugin="ansicolor@0.4.2">
      <colorMapName>xterm</colorMapName>
    </hudson.plugins.ansicolor.AnsiColorBuildWrapper>
  </buildWrappers>
  <pollSubjobs>false</pollSubjobs>
</com.tikal.jenkins.plugins.multijob.MultiJobProject>