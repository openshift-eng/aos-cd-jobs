// poll-payload is a scheduled Jenkins job that polls payload changes on multiple release streams.
// NOTE: This job relies on workspace for keeping last retrieved state.

import groovy.transform.Field
import java.io.FileNotFoundException
import java.net.URLEncoder
import groovy.json.JsonOutput


@Field commonlib
@Field buildlib

// A map of release stream names to be polled and and actions to be taken
@Field final ACTIONS = [
    // as part of 4.next we will manually publish only sprintly dev-previews
    "4-dev-preview": [this.&setDevPreviewLatest],
    "4-dev-preview-s390x": [this.&setDevPreviewLatest],
    "4-dev-preview-ppc64le": [this.&setDevPreviewLatest],
    "4-dev-preview-arm64": [this.&setDevPreviewLatest],

    // 4.14 microshift rebase is expected to fail
    // should be enabled when resolved
    // see thread https://redhat-internal.slack.com/archives/CB95J6R4N/p1684351657158089
    "4.14.0-0.nightly":  [this.&publishRPMsEl9, this.&publishRPMsEl8],
    "4.14.0-0.nightly-arm64": [this.&publishRPMsEl9, this.&publishRPMsEl8],

    "4.13.0-0.nightly":  [this.&startBuildMicroshiftJob, this.&publishRPMsEl9, this.&publishRPMsEl8],
    "4.13.0-0.nightly-arm64": [this.&publishRPMsEl9, this.&publishRPMsEl8],

    "4.12.0-0.nightly":  [this.&startBuildMicroshiftJob, this.&publishRPMsEl8],
    "4.12.0-0.nightly-arm64": [this.&publishRPMsEl8],
]

def setDevPreviewLatest(String releaseStream, Map latestRelease, Map previousRelease) {
    def buildVersion = commonlib.extractMajorMinorVersion(releaseStream)
    def arch = commonlib.extractArchFromReleaseName(latestRelease.name)
    release.stageSetClientLatest(latestRelease.name, arch, "ocp-dev-preview")
}

def publishRPMsEl9(String releaseStream, Map latestRelease, Map previousRelease) {
    def buildVersion = commonlib.extractMajorMinorVersion(releaseStream)
    def arch = commonlib.extractArchFromReleaseName(latestRelease.name)
    build(
        job: '/aos-cd-builds/build%2Fpublish-rpms',
        parameters: [
            string(name: 'BUILD_VERSION', value: buildVersion),
            string(name: 'ARCH', value: arch),
            string(name: 'EL_VERSION', value: '9'),
        ],
    )
}

def publishRPMsEl8(String releaseStream, Map latestRelease, Map previousRelease) {
    def buildVersion = commonlib.extractMajorMinorVersion(releaseStream)
    def arch = commonlib.extractArchFromReleaseName(latestRelease.name)
    build(
        job: '/aos-cd-builds/build%2Fpublish-rpms',
        parameters: [
            string(name: 'BUILD_VERSION', value: buildVersion),
            string(name: 'ARCH', value: arch),
            string(name: 'EL_VERSION', value: '8'),
        ],
    )
}

def startBuildMicroshiftJob(String releaseStream, Map latestRelease, Map previousRelease) {
    buildlib.withAppCiAsArtPublish() {
        sh "oc registry login"
    }
    // This function is invoked when a new x86_64 is created and accepted by the Release Controller
    def buildVersion = commonlib.extractMajorMinorVersion(releaseStream)
    def x86_64_nightly = latestRelease.name
    // Get all nightlies matching the x86_64 nightly
    echo "Get nightlies matching the x86_64 nightly ${x86_64_nightly}..."
    def cmd = "doozer --assembly=stream --arches x86_64,aarch64 --group openshift-${buildVersion} --working-dir ./doozer-working get-nightlies --matching ${x86_64_nightly}"
    def res = commonlib.shell(script: cmd, returnAll: true)
    if (res.returnStatus != 0) {
        if (res.combined.contains("Found no nightlies") || res.combined.contains("No sets of equivalent nightlies")) {
            // Couldn't find consistent and accepted nightlies matching the x86_64 nightly
            echo "WARNING: Couldn't find consistent and accepted nightlies matching the x86_64 nightly ${x86_64_nightly}. Will not trigger build-microshift."
            return
        }
        error("Error getting nightlies matching ${x86_64_nightly}: ${res.stderr}")
    }
    // Trigger build-microshift
    def nightlies = res.stdout.trim()
    build(
        job: "../aos-cd-builds/build%2Fbuild-microshift",
        propagate: false,
        parameters: [
            string(name: 'BUILD_VERSION', value: buildVersion),
            string(name: 'ASSEMBLY', value: "microshift"),
            string(name: 'RELEASE_PAYLOADS', value: nightlies),
        ]
    )
}

/**
 * Determine if the latest release has been changed
 * @param releaseStream release stream name
 * @param releaseCacheFile is a file to cache last checked release
 * @return [changed, latestRelease, previousRelease] If changed, changed is true.
 *     latestRelease is the metadata of the latest release,
*      and previousRelease is the metadata of the release checked last time.
 */
def checkLatestRelease(String releaseStream, String releaseCacheFile) {
    def encodedName = URLEncoder.encode(releaseStream, "UTF-8")
    def previousRelease = null
    try {
        previousRelease = readJSON(file: releaseCacheFile)
    } catch (FileNotFoundException ex) {
        echo "Cached previous release for $releaseStream is not found."
    }

    // There are different release controllers for OCP - one for each architecture.
    def release_controller_url = commonlib.getReleaseControllerURL(releaseStream)

    def url = "${release_controller_url}/api/v1/releasestream/${encodedName}/latest"
    def response = httpRequest(
        url: url,
        httpMode: 'GET',
        contentType: 'APPLICATION_JSON',
        timeout: 30,
    )
    def latestRelease = readJSON(text: response.content)
    def changed = !previousRelease || latestRelease.name != previousRelease.name
    return [changed, latestRelease, previousRelease]
}

def saveToReleaseCache(Map release, String releaseCacheFile) {
    writeFile(file: releaseCacheFile, text: JsonOutput.toJson(release))
}

properties([
    buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '30', numToKeepStr: '')),
    disableConcurrentBuilds(),
    disableResume(),
])

node() {
    checkout scm
    buildlib = load("pipeline-scripts/buildlib.groovy")
    commonlib = buildlib.commonlib
    description = ""
    def actionArguments = [:]
    if (ACTIONS.isEmpty()) {
        return
    }
    for (releaseStream in ACTIONS.keySet()) {
        def releaseCacheFile = "${releaseStream}.json"
        def changed, latestRelease, previousRelease
        try {
            (changed, latestRelease, previousRelease) = checkLatestRelease(releaseStream, releaseCacheFile)
            description += "${releaseStream} -> ${latestRelease.name}"
            if (!changed) {
                description += " [no change]\n"
                continue
            }
            actionArguments[releaseStream] = [releaseStream, latestRelease, previousRelease]
            saveToReleaseCache(latestRelease, "${releaseStream}.json")
        } catch (Exception ex) {
            echo "Error checking for latest release on $releaseStream: $ex"
            description += "${releaseStream} [error]\n"
            currentBuild.result = "UNSTABLE"
            continue
        }
        description += "\n"
    }
    currentBuild.description = description.trim()

    parallel(actionArguments.collectEntries({ releaseStream, args ->
        [releaseStream, {
            stage(releaseStream) {
                echo "Invoking actions for $releaseStream"
                def actions = ACTIONS[releaseStream]
                actions.eachWithIndex { fn, idx ->
                    try {
                        fn(args[0], args[1], args[2])
                    } catch (Exception ex) {
                        echo "Error invoking action number ${idx} for $releaseStream with arguments '${args}': $ex"
                        currentBuild.result = "UNSTABLE"
                    }
                }
            }
        }]
    }))
}
