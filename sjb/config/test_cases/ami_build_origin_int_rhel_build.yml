---
parameters:
- name: "buildId"
  description: "The ID that prow sets on a Jenkins job in order to correlate it with a ProwJob"
  default_value: ""
provision:
  os: "rhel"
  stage: "base"
  provider: "aws"
actions:
  - type: "host_script"
    title: "bring source code up to date"
    script: |-
      for repo in aos-cd-jobs origin origin-web-console openshift-ansible origin-aggregated-logging image-registry kubernetes-metrics-server; do
        oct sync remote "${repo}"
      done
  - type: "script"
    title: "build an origin release"
    repository: "origin"
    timeout: 7200
    script: |-
      export OS_BUILD_IMAGE_ARGS=''
      export OS_ONLY_BUILD_PLATFORMS="linux/amd64"
      export OS_BUILD_ENV_PRESERVE="_output/local"
      hack/build-base-images.sh
      OS_BUILD_ENV_PULL_IMAGE=true hack/env make release BUILD_TESTS=1 #OS_BUILD_SRPM=1 # disabled due to OOM in docker
      sed -i 's|go/src|data/src|' _output/local/releases/rpms/origin-local-release.repo
      sudo cp _output/local/releases/rpms/origin-local-release.repo /etc/yum.repos.d/
      # docker seems to have a bunch of memory leaks, so let's
      # give it a new address space before testing starts
      sudo systemctl restart docker.service
  - type: "script"
    title: "determine the release commit for origin images and version for rpms"
    timeout: 600
    repository: "origin"
    script: |-
      jobs_repo="/data/src/github.com/openshift/aos-cd-jobs/"
      git log -1 --pretty=%h > "${jobs_repo}/ORIGIN_COMMIT"

      source hack/lib/init.sh
      os::build::rpm::get_nvra_vars
      echo "-${OS_RPM_VERSION}-${OS_RPM_RELEASE}" > "${jobs_repo}/ORIGIN_PKG_VERSION"
      echo "${OS_GIT_MAJOR}.${OS_GIT_MINOR}" | sed "s/+//" > "${jobs_repo}/ORIGIN_RELEASE"
      echo "${OS_RPM_VERSION}" | cut -d'.' -f2 > "${jobs_repo}/ORIGIN_PKG_MINOR_VERSION"
      tag="$( echo "v${OS_GIT_MAJOR}.${OS_GIT_MINOR}" | sed "s/+//" )"
      echo "${tag}" > "${jobs_repo}/ORIGIN_TAG"
  - type: "script"
    title: "build an openshift-ansible release"
    repository: "openshift-ansible"
    script: |-
      tito_tmp_dir="tito"
      mkdir -p "${tito_tmp_dir}"
      tito tag --offline --accept-auto-changelog
      tito build --output="${tito_tmp_dir}" --rpm --test --offline --quiet
      createrepo "${tito_tmp_dir}/noarch"
      cat << EOR > ./openshift-ansible-local-release.repo
      [openshift-ansible-local-release]
      baseurl = file://$( pwd )/${tito_tmp_dir}/noarch
      gpgcheck = 0
      name = OpenShift Ansible Release from Local Source
      EOR
      sudo cp ./openshift-ansible-local-release.repo /etc/yum.repos.d
  - type: "script"
    title: "determine the release commit for origin images and version for rpms"
    repository: "origin"
    script: |-
      registry_repo="/data/src/github.com/openshift/image-registry/"
      git log -1 --pretty=%h >> "${registry_repo}/ORIGIN_COMMIT"
      metrics_repo="/data/src/github.com/openshift/kubernetes-metrics-server/"
      git log -1 --pretty=%h >> "${metrics_repo}/ORIGIN_COMMIT"
      console_repo="/data/src/github.com/openshift/origin-web-console-server/"
      git log -1 --pretty=%h >> "${console_repo}/ORIGIN_COMMIT"
  - type: "script"
    title: "build the image registry container image"
    repository: "image-registry"
    timeout: 3600
    script: |-
      make build-images
      docker tag openshift/origin-docker-registry:latest "openshift/origin-docker-registry:$( cat ./ORIGIN_COMMIT )"
  - type: "script"
    title: "build the kubernetes metrics server container image"
    repository: "kubernetes-metrics-server"
    timeout: 3600
    script: |-
      make build-images
      docker tag openshift/origin-metrics-server:latest "openshift/origin-metrics-server:$( cat ./ORIGIN_COMMIT )"
  - type: "script"
    title: "build the origin web console server container image"
    repository: "origin-web-console-server"
    timeout: 3600
    script: |-
      make build-images
      docker tag openshift/origin-web-console:latest "openshift/origin-web-console:$( cat ./ORIGIN_COMMIT )"
  - type: "script"
    title: "build an origin-aggregated-logging release"
    repository: "origin-aggregated-logging"
    script: |-
      hack/build-images.sh
  - type: "host_script"
    title: "package the AMI"
    script: |-
      oct package ami --stage=next
  - type: "host_script"
    title: "release the AMI"
    script: |-
      oct package ami --mark-ready
artifacts:
  - "/data/src/github/openshift/origin/_output/scripts"
generated_artifacts:
  installed_packages.log: 'sudo yum list installed'
  avc_denials.log: 'sudo ausearch -m AVC -m SELINUX_ERR -m USER_AVC'
  docker.info: 'sudo docker version && sudo docker info && sudo docker images && sudo docker ps -a'
  filesystem.info: 'sudo df -h && sudo pvs && sudo vgs && sudo lvs'
system_journals:
  - docker.service
  - systemd-journald.service
