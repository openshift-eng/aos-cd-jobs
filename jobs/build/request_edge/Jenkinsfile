#!/usr/bin/env groovy

node {
    checkout scm
    def release = load("pipeline-scripts/release.groovy")
    def slacklib = load("pipeline-scripts/slack.groovy")
    def buildlib = release.buildlib
    def commonlib = release.commonlib

    // Expose properties for a parameterized build
    properties(
        [
            buildDiscarder(
                logRotator(
                    artifactDaysToKeepStr: '',
                    artifactNumToKeepStr: '',
                    daysToKeepStr: '',
                    numToKeepStr: '')),
            [
                $class: 'ParametersDefinitionProperty',
                parameterDefinitions: [
                    [
                        name: 'CANDIDATE_VERSION',
                        description: 'the release candidate version',
                        $class: 'hudson.model.StringParameterDefinition',
                        defaultValue: ""
                    ],
                    [
                        name: 'NEXT_VERSION',
                        description: 'the release candidate version\'s next minor version if exist',
                        $class: 'hudson.model.StringParameterDefinition',
                        defaultValue: ""
                    ],
                    [
                        name: 'MAIL_LIST_SUCCESS',
                        description: 'Success Mailing List',
                        $class: 'hudson.model.StringParameterDefinition',
                        defaultValue: [
                            'aos-team-art@redhat.com',
                            'aos-art-automation+new-edge@redhat.com',
                        ].join(',')
                    ],
                    [
                        name: 'MAIL_LIST_FAILURE',
                        description: 'Failure Mailing List',
                        $class: 'hudson.model.StringParameterDefinition',
                        defaultValue: [
                            'aos-art-automation+failed-edge@redhat.com'
                        ].join(',')
                    ],
                    commonlib.mockParam(),
                ]
            ],
        ]
    )

    commonlib.checkMock()
    buildlib.initialize()
    buildlib.cleanWorkdir("${env.WORKSPACE}")

    try {
        sshagent(['openshift-bot']) {
            currentBuild.description += "request-edge: ${params.CANDIDATE_VERSION} ${params.NEXT_VERSION}"
            def next_release = "${params.NEXT_VERSION}"
            def release_args = ""
            def github_org = "openshift"

            if(next_release != "") {
                release_args += "--next-version ${next_release}"
            }

            stage("elliott request-edge") {
                withCredentials([string(credentialsId: 'openshift-bot-token', variable: 'access_token')]) {                
                    // buildlib.elliott """
                    //     request-edge
                    //     --candidate-version ${params.CANDIDATE_VERSION}
                    //     ${release_args}
                    //     --github-org ${github_org}
                    //     --github-access-token ${access_token}
                    // """
                    commonlib.shell(
                        returnAll: true,
                        script: "python3 /home/jenkins/shiywang/elliott/elliott request-edge --candidate-version ${params.CANDIDATE_VERSION} ${release_args} --github-org ${github_org} --github-access-token ${access_token}",
                    )
                }
            }

            stage("send msg to @architects-team") {
                text = "@architects-team release canidate ${params.CANDIDATE_VERSION} PR on cincinnati-graph-data are ready for review: https://github.com/openshift/cincinnati-graph-data/pulls/openshift-bot"
                slacklib.notifySlack('#team-art', text, [], null)
            }
        }

        commonlib.email(
            to: "${params.MAIL_LIST_SUCCESS}",
            replyTo: "aos-team-art@redhat.com",
            from: "aos-art-automation@redhat.com",
            subject: "Success requesting candidate realese on (${params.CANDIDATE_VERSION}, ${params.NEXT_VERSION})",
            body: """Jenkins Job: ${env.BUILD_URL}"""
        );

    } catch (err) {
        commonlib.email(
            to: "${params.MAIL_LIST_FAILURE}",
            replyTo: "aos-team-art@redhat.com",
            from: "aos-art-automation@redhat.com",
            subject: "Error running OCP Tarball sources",
            body: "Encountered an error while running OCP Tarball sources: ${err}");
        currentBuild.description = "Error while running OCP Tarball sources:\n${err}"
        currentBuild.result = "FAILURE"
        throw err
    }
}