apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: gen-assembly
  labels:
    app: "artcd"
spec:
  description: >-
    Generate a recommended definition for an assembly based on a set of
    nightlies. Find nightlies ready for release and define an assembly to add to
    `releases.yml`. A pull request will be automatically created to add the
    generated assembly definition to releases.yml. It is the responsibility of
    the ARTist to review and merge the PR.
  params:
    - description: Group name. e.g. openshift-4.9
      name: group
      type: string
    - description: The name of an assembly; must be defined in releases.yml (e.g. 4.9.1)
      name: assembly
      type: string
    - default: "false"
      description: >-
        Use "true" to generate an assembly definition for a custom release.
        Custom assemblies are not for official release. They can, for example,
        not have all required arches for the group.
      name: custom
      type: string
    - default: ""
      description: >-
        (Optional) List of nightlies for each arch. For custom releases you do
        not need a nightly for each arch.
      name: nightlies
      type: string
    - description: >-
        This is the in-flight release version of previous minor version of OCP.
        If there is no in-flight release, use "none".
      name: in-flight-prev
      type: string
    - default: ""
      description: >-
        (Optional) List of OCP releases that can upgrade to the current release.
        Leave empty to use suggested value. Otherwise, follow item #6 "PREVIOUS"
        of the following doc for instructions on how to fill this field:
        https://mojo.redhat.com/docs/DOC-1201843#jive_content_id_Completing_a_4yz_release
      name: previous
      type: string
    - default: "false"
      description: Match nightlies that have not completed tests
      name: allow-pending
      type: string
    - default: "false"
      description: Match nightlies that have failed their tests
      name: allow-rejected
      type: string
    - default: "false"
      description: >-
        Allow matching nightlies built from matching commits but with
        inconsistent RPMs
      name: allow-inconsistency
      type: string
    - default: ""
      description: (Optional) Limit included arches. Only applicable to a custom release.
      name: limit-arches
      type: string
    - default: ""
      description: >-
        (Optional) ocp-build-data fork to use (e.g. assembly definition in your
        own fork)
      name: data-path
      type: string
    - default: "false"
      description: "Take no action, just echo what the job would have done."
      name: dry-run
      type: string
  tasks:
    - name: gen-assembly
      taskRef:
        kind: Task
        name: artcd
      params:
        - name: script
          value: |
            #!/usr/bin/env python3
            import re
            import os
            import subprocess

            cmd = [
                "artcd",
                "-v",
                "--config=/etc/artcd/artcd.toml",
            ]

            if "$(params.dry-run)" == "true":
              cmd.append("--dry-run")

            cmd.extend([
                "gen-assembly",
                "--group", "$(params.group)",
                "--assembly", "$(params.assembly)",
            ])

            if "$(params.data-path)":
              cmd.append(f"--data-path=$(params.data-path)")

            limit_arches = [p for p in re.split(r'[\s,]', "$(params.limit-arches)") if p]

            if limit_arches:
              cmd.extend([f"--arch={p}" for p in limit_arches])

            if "$(params.custom)" == "true":
              cmd.append("--custom")

            if "$(params.allow-pending)" == "true":
              cmd.append("--allow-pending")

            if "$(params.allow-rejected)" == "true":
              cmd.append("--allow-rejected")

            if "$(params.allow-inconsistency)" == "true":
              cmd.append("--allow-inconsistency")

            if "$(params.in-flight-prev)" and "$(params.in-flight-prev)" != "none":
              cmd.append("--in-flight=$(params.in-flight-prev)")

            previous_list = [p for p in re.split(r'[\s,]', "$(params.previous)") if p]

            if previous_list:
              cmd.extend([f"--previous={p}" for p in previous_list])
            else:
              cmd.append("--auto-previous")

            nightlies = [n for n in re.split(r'[\s,]', "$(params.nightlies)") if n]

            cmd.extend([f"--nightly={n}" for n in nightlies])

            print(f"Running kinit...")

            subprocess.run(["kinit", "-f", "-k", "-t", "/etc/kerberos-keytab/keytab", "exd-ocp-buildvm-bot-prod@IPA.REDHAT.COM"], check=True, universal_newlines=True)

            print(f"Running {cmd}...")

            subprocess.run(cmd, check=True, universal_newlines=True, env=os.environ.copy())
