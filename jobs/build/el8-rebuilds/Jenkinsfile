#!/usr/bin/env groovy

node {
    checkout scm
    def buildlib = load("pipeline-scripts/buildlib.groovy")
    def commonlib = buildlib.commonlib

    properties(
        [
            buildDiscarder(
                logRotator(
                    artifactDaysToKeepStr: '',
                    artifactNumToKeepStr: '',
                    daysToKeepStr: '60',
                    numToKeepStr: ''
                )
            ),
            disableResume(),
            disableConcurrentBuilds(),
            [
                $class: 'ParametersDefinitionProperty',
                parameterDefinitions: [
                    [
                        name: 'MAIL_LIST_FAILURE',
                        description: 'Failure Mailing List',
                        $class: 'hudson.model.StringParameterDefinition',
                        defaultValue: 'aos-art-automation+failed-rhcos-puddle@redhat.com',
                    ],
                    commonlib.suppressEmailParam(),
                    commonlib.mockParam(),
                ]
            ],
        ]
    )

    commonlib.checkMock()

    def buildExceptions = []
    def puddleVersions = ["4.2", "4.3", "4.4", "4.5", "4.6"]
    puddleVersions.each { version ->
        try {
            buildlib.kinit()
            stage("rpm rebuilds for ${version}") {
                def builds = [
                    "openshift": {
                        commonlib.shell("./rebuild_rpm.sh openshift ${version}")
                    },
                    "clients": {
                        commonlib.shell("./rebuild_rpm.sh openshift-clients ${version}")
                    }
                ]
                parallel builds
            }
        } catch(e) {
            // still run other versions when an rpm build fails
            echo "Package build failed:\n${e}"
            buildExceptions << e
            currentBuild.result = "FAILURE"
        }
    }

    if (buildExceptions) {
        err = buildExceptions[0]
        currentBuild.description = "\nerror: ${err.getMessage()}"
        commonlib.email(
            to: "${params.MAIL_LIST_FAILURE}",
            from: "aos-art-automation@redhat.com",
            replyTo: "aos-team-art@redhat.com",
            subject: "Error building RPMs and puddles for RHCOS",
            body: "Encountered ${buildExceptions.size()} error(s) while running pipeline:\n${buildExceptions}",
        )
        throw err
    }
}
