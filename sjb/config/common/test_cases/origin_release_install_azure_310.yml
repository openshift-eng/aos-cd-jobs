---
parent: 'common/test_cases/origin_release_with_ecosystem_310.yml'
extensions:
  sync:
    - openshift,release=master
    - Azure,acs-engine=master
  parameters:
    - name: "FOCUS"
      description: "Literal string to pass to <code>--ginkgo.focus</code>"
    - name: "ADDITIONAL_SKIP"
      description: |-
        Regular expression to filter additional tests from the conformance suite.
        See also:
        <div>
        </div>
    - name: "OS_PUSH_BASE_REGISTRY"
      default_value: "registry.svc.ci.openshift.org/"
    - name: "OS_PUSH_BASE_REPO"
      default_value: "ci-pr-images/"
    - name: "DEBUG_MAIL"
      default_value: "aos-azure@redhat.com"
  actions:
    - type: "forward_parameters"
      parameters:
        - ADDITIONAL_SKIP
        - JOB_NAME
        - BUILD_NUMBER
        - SUITE
        - FOCUS
        - JOB_SPEC
        - OS_PUSH_BASE_REGISTRY
        - OS_PUSH_BASE_REPO

    - type: "script"
      title: "build openshift-ansible image"
      timeout: 900
      repository: openshift-ansible
      script: |-
        docker build -f images/installer/Dockerfile -t openshift/origin-ansible:latest .

    # calculate the instance prefix
    - type: "host_script"
      title: "determine the instance prefix"
      script: |-
        # we need a short but unique identifier, so we take the first 7 of SHA
        hashed_identifier="$( echo "${JOB_NAME}" | sha1sum )"
        export INSTANCE_PREFIX="prtest-${hashed_identifier:0:7}-${BUILD_NUMBER}"
        # write the standard variables for reuse
        echo "INSTANCE_PREFIX=${INSTANCE_PREFIX:-}" >> INSTANCE_PREFIX
        echo "OS_TAG=$( ssh -F ./.config/origin-ci-tool/inventory/.ssh_config openshiftdevel "cat /data/src/github.com/openshift/aos-cd-jobs/ORIGIN_COMMIT" )" >> INSTANCE_PREFIX
        echo "OS_PUSH_BASE_REPO=${OS_PUSH_BASE_REPO}${INSTANCE_PREFIX}-" >> INSTANCE_PREFIX
        # hack around forwarding this to the other machine
        cat INSTANCE_PREFIX | ssh -F ./.config/origin-ci-tool/inventory/.ssh_config openshiftdevel "cat >> /etc/environment"
        job=$JOB_NAME
        job=${job/pull_request/pr}
        job=${job/conformance/c}
        echo "RESOURCE_GROUP=ci-$job-$BUILD_NUMBER" | ssh -F ./.config/origin-ci-tool/inventory/.ssh_config openshiftdevel "cat >>/etc/environment"

    # publish artifacts
    - type: "host_script"
      title: "move RPMs to GCS repo"
      script: |-
        if [[ "${REPO_OWNER-}" != "openshift" || "${REPO_NAME-}" != "origin" ]]; then
          # use pre-built RPMs when the job is not targeting origin, or use master if nothing else is available
          location_url="$(curl -q https://storage.googleapis.com/origin-ci-test/releases/openshift/origin/${ORIGIN_TARGET_BRANCH:-master}/.latest-rpms)"
          # hack around forwarding this to the other machine
          ssh -F ./.config/origin-ci-tool/inventory/.ssh_config openshiftdevel "echo 'location_url=${location_url:-}' >> /etc/environment"
          exit 0
        fi

        # Allows us to publish artifacts for tags, since we have no tag mechanism
        if [[ -z "${JOB_SPEC-}" ]]; then
          JOB_SPEC="{\"type\":\"postsubmit\",\"refs\":{\"base_ref\":\"${ORIGIN_TARGET_BRANCH}\"}}"
        fi
        type="$( echo "${JOB_SPEC}" | jq  -r '.type' )"
        if   [[ "${type}" == "postsubmit" ]]; then
          location_base="origin-ci-test/logs/${JOB_NAME}/${BUILD_NUMBER}"
        elif [[ "${type}" == "batch" ]]; then
          location_base="origin-ci-test/logs/${JOB_NAME}/${BUILD_NUMBER}"
        elif [[ "${type}" == "presubmit" ]]; then
          location_base="origin-ci-test/pr-logs/pull/${PULL_NUMBER}/${JOB_NAME}/${BUILD_NUMBER}"
        else
          echo "unknown job type in ${JOB_SPEC}"
          exit 1
        fi

        location="${location_base}/artifacts/rpms"
        location_url="https://storage.googleapis.com/${location}"

        mkdir -p artifacts/rpms
        rsync --archive --omit-dir-times --rsh "ssh -F ./.config/origin-ci-tool/inventory/.ssh_config" --rsync-path='sudo rsync' openshiftdevel:/data/src/github.com/openshift/origin/_output/local/releases/rpms ./artifacts/ || true
        gsutil -m cp -r artifacts/rpms "gs://${location}"

        # hack around forwarding this to the other machine
        ssh -F ./.config/origin-ci-tool/inventory/.ssh_config openshiftdevel "echo 'location_url=${location_url:-}' >> /etc/environment"
    - type: "script"
      title: "create directory for docker config"
      script: |-
        mkdir -p /tmp/.docker
        chmod a+rwx /tmp/.docker
    - type: "host_script"
      title: "transfer docker config to remote host"
      script: |-
        scp -F ./.config/origin-ci-tool/inventory/.ssh_config /var/lib/jenkins/.docker/config.json openshiftdevel:/tmp/.docker/
    - type: "forward_parameters"
      parameters:
        - OS_PUSH_TAG
        - OS_PUSH_BASE_REGISTRY
    - type: "script"
      title: "push the release"
      repository: "origin"
      script: |-
        sudo chmod a+rw /tmp/.docker/config.json
        DOCKER_CONFIG=/tmp/.docker OS_PUSH_LOCAL=1 OS_PUSH_ALWAYS=1 hack/push-release.sh

    - type: "host_script"
      title: "move secrets to remote host"
      script: |-
        rsync --copy-links --omit-dir-times --archive --rsh "ssh -F ./.config/origin-ci-tool/inventory/.ssh_config" /var/lib/jenkins/.azure/* openshiftdevel:/data/src/github.com/openshift/release/cluster/test-deploy/azure/
        ssh -F ./.config/origin-ci-tool/inventory/.ssh_config openshiftdevel 'sudo chown -R origin:origin-git /data/src/github.com/openshift/release/cluster/test-deploy/azure/'
        ssh -F ./.config/origin-ci-tool/inventory/.ssh_config openshiftdevel 'sudo chmod -R ug+rwX /data/src/github.com/openshift/release/cluster/test-deploy/azure/'

    - type: "host_script"
      title: "set debuggability flag"
      script: |-
        >debuggable

    - type: "script"
      title: "build node image"
      repository: "release"
      script: |-
        suffix='origin-${component}'
        suffix="${suffix}:$(cat /data/src/github.com/openshift/aos-cd-jobs/ORIGIN_TAG)"
        cd cluster/test-deploy/azure
        TYPE=azure ../../bin/ansible.sh ansible-playbook \
          -e "openshift_azure_resource_group_name=$RESOURCE_GROUP" \
          -e "openshift_azure_resource_location=eastus" \
          -e "openshift_azure_input_image_ns=images" \
          -e "openshift_azure_input_image_prefix=centos7-base" \
          -e "openshift_azure_output_image_ns=$RESOURCE_GROUP" \
          -e "openshift_azure_output_image_name=centos7-origin" \
          -e "openshift_azure_install_repo=$location_url" \
          -e "oreg_url=${OS_PUSH_BASE_REGISTRY}${OS_PUSH_BASE_REPO}${suffix}" \
          playbooks/azure/openshift-cluster/build_node_image.yml

    - type: "script"
      title: "provision test cluster"
      repository: "release"
      script: |-
        cd cluster/test-deploy/azure
        TYPE=azure ../../bin/ansible.sh ansible-playbook \
          -e "openshift_azure_resource_group_name=$RESOURCE_GROUP" \
          -e "openshift_azure_resource_location=eastus" \
          -e "openshift_azure_input_image_ns=$RESOURCE_GROUP" \
          -e "openshift_azure_input_image_name=centos7-origin" \
          playbooks/azure/openshift-cluster/launch.yml

    - type: "script"
      title: "run the acs-engine e2e test"
      script: |-
        set -a +o xtrace
        . /data/src/github.com/openshift/release/cluster/test-deploy/azure/credentials
        set +a -o xtrace

        cd /data/src/github.com/Azure/acs-engine
        export GOPATH="/data"
        export PATH="${PATH}:${GOPATH}/bin"
        make build

        set +o xtrace
        docker run --rm -v ${PWD}:/go/src/github.com/Azure/acs-engine:z \
          -w /go/src/github.com/Azure/acs-engine \
          -e ORCHESTRATOR=openshift \
          -e ORCHESTRATOR_VERSION=unstable \
          -e IMAGE_RESOURCE_GROUP=$RESOURCE_GROUP \
          -e IMAGE_NAME=centos7-origin \
          -e CLUSTER_DEFINITION=examples/openshift.json \
          -e TIMEOUT=30m \
          -e CLEANUP_ON_EXIT=true \
          -e REGIONS=eastus \
          -e CLIENT_ID=$AZURE_CLIENT_ID \
          -e CLIENT_SECRET=$AZURE_SECRET \
          -e TENANT_ID=$AZURE_TENANT \
          -e SUBSCRIPTION_ID=$AZURE_SUBSCRIPTION_ID \
          registry.svc.ci.openshift.org/ci/acs-engine-tests:v3.9 make test-openshift
        set -o xtrace

  post_actions:
    - type: "host_script"
      title: "hold failed test cluster for debug"
      script: |-
        trap 'exit 0' EXIT

        if [[ "$BUILD_RESULT" == "SUCCESS" || -z "$DEBUG_MAIL" || "$JOB_NAME" != test_branch_* || ! -e debuggable ]]; then
          exit 0
        fi

        nc localhost 25 <<EOF
        HELO $(hostname)
        MAIL FROM: <noreply@redhat.com>
        RCPT TO: <$DEBUG_MAIL>
        DATA
        From: Jenkins <noreply@redhat.com>
        To: <$DEBUG_MAIL>
        Subject: Debug build in Jenkins: $JOB_NAME #$BUILD_NUMBER

        Build $JOB_NAME #$BUILD_NUMBER failed in Jenkins.

        The build environment will be preserved for debugging for two hours.

        See <$RUN_DISPLAY_URL>
        .
        QUIT
        EOF

        ssh -F ./.config/origin-ci-tool/inventory/.ssh_config openshiftdevel 'sleep 7200'

    - type: "script"
      title: "deprovision test cluster"
      repository: "release"
      script: |-
        trap 'exit 0' EXIT
        cd cluster/test-deploy/azure
        TYPE=azure ../../bin/ansible.sh ansible-playbook \
          -e "openshift_azure_resource_group_name=$RESOURCE_GROUP" \
          playbooks/azure/openshift-cluster/deprovision.yml

    - type: "host_script"
      title: "delete PR images"
      repository: "release"
      timeout: 900
      script: |-
        trap 'exit 0' EXIT
        source ./INSTANCE_PREFIX
        export KUBECONFIG=/var/lib/jenkins/secrets/image-pr-push.kubeconfig
        oc get is -o name -n ci-pr-images | grep "${INSTANCE_PREFIX}" | xargs -r oc delete
