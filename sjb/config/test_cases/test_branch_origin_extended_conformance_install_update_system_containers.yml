---
parent: 'common/test_cases/origin_minimal.yml'
extensions:
  sync:
    - openshift,aos-cd-jobs=master
    - openshift,image-registry=master
    - openshift,kubernetes-metrics-server=master
    - openshift,origin=master
  actions:
    - type: "script"
      title: "build an origin release"
      repository: "origin"
      script: |-
        if [[ -n "${PULL_REFS:-}" ]]; then
          export OPENSHIFT_ANSIBLE_TARGET_BRANCH="${PULL_REFS%%:*}"
        fi
        if [[ "${OPENSHIFT_ANSIBLE_TARGET_BRANCH:-}" == "release-1.5" ]]; then
            echo "[INFO] System containers are not supported, skipping."
            exit 0
        fi
        git checkout ${OPENSHIFT_ANSIBLE_TARGET_BRANCH}
        hack/build-base-images.sh
        OS_BUILD_ENV_PULL_IMAGE=true OS_BUILD_ENV_PRESERVE=_output/local hack/env OS_ONLY_BUILD_PLATFORMS='linux/amd64' hack/build-rpm-release.sh
        sudo systemctl restart docker
        git describe --abbrev=0 >> "ORIGIN_TAG"
        cat ORIGIN_TAG > _output/local/releases/.commit
        hack/build-images.sh
        sed -i 's|go/src|data/src|' _output/local/releases/rpms/origin-local-release.repo
        sudo cp _output/local/releases/rpms/origin-local-release.repo /etc/yum.repos.d/
    - type: "script"
      title: "build an openshift-ansible release"
      repository: "openshift-ansible"
      script: |-
        if [[ -n "${PULL_REFS:-}" ]]; then
          export OPENSHIFT_ANSIBLE_TARGET_BRANCH="${PULL_REFS%%:*}"
        fi
        if [[ "${OPENSHIFT_ANSIBLE_TARGET_BRANCH:-}" == "release-1.5" ]]; then
            echo "[INFO] System containers are not supported, skipping."
            exit 0
        fi

        tito_tmp_dir="tito"
        mkdir -p "${tito_tmp_dir}"
        tito tag --offline --accept-auto-changelog
        tito build --output="${tito_tmp_dir}" --rpm --test --offline --quiet
        createrepo "${tito_tmp_dir}/noarch"
        cat << EOR > ./openshift-ansible-local-release.repo
        [openshift-ansible-local-release]
        baseurl = file://$( pwd )/${tito_tmp_dir}/noarch
        gpgcheck = 0
        name = OpenShift Ansible Release from Local Source
        EOR
        sudo cp ./openshift-ansible-local-release.repo /etc/yum.repos.d
    - type: "script"
      title: "install the openshift-ansible release"
      repository: "openshift-ansible"
      timeout: 3600
      script: |-
        if [[ -n "${PULL_REFS:-}" ]]; then
          export OPENSHIFT_ANSIBLE_TARGET_BRANCH="${PULL_REFS%%:*}"
        fi
        if [[ "${OPENSHIFT_ANSIBLE_TARGET_BRANCH:-}" == "release-1.5" ]]; then
            echo "[INFO] System containers are not supported, skipping."
            exit 0
        fi
        if [[ "${PULL_BASE_REF}" == "release-3.7" || "${PULL_BASE_REF}" == "release-3.6" || "${PULL_BASE_REF}" == "release-3.5"  ]]; then
          sudo yum downgrade -y ansible-2.3\*
        fi

        last_tag="$( git describe --tags --abbrev=0 --exact-match HEAD )"
        last_commit="$( git log -n 1 --pretty=%h )"
        sudo yum install -y "atomic-openshift-utils${last_tag/openshift-ansible/}.git.0.${last_commit}.el7"
        rpm -V "atomic-openshift-utils${last_tag/openshift-ansible/}.git.0.${last_commit}.el7"
    - type: "script"
      title: "install Ansible plugins"
      repository: "origin"
      script: |-
        if [[ -n "${PULL_REFS:-}" ]]; then
          export OPENSHIFT_ANSIBLE_TARGET_BRANCH="${PULL_REFS%%:*}"
        fi
        if [[ "${OPENSHIFT_ANSIBLE_TARGET_BRANCH:-}" == "release-1.5" ]]; then
            echo "[INFO] System containers are not supported, skipping."
            exit 0
        fi

        sudo chmod o+rw /etc/environment
        echo "ANSIBLE_JUNIT_DIR=$( pwd )/_output/scripts/ansible_junit" >> /etc/environment
        sudo mkdir -p /usr/share/ansible/plugins/callback
        for plugin in 'default_with_output_lists' 'generate_junit'; do
           wget "https://raw.githubusercontent.com/openshift/origin-ci-tool/master/oct/ansible/oct/callback_plugins/${plugin}.py"
           sudo mv "${plugin}.py" /usr/share/ansible/plugins/callback
        done
        sudo sed -r -i -e 's/^#?stdout_callback.*/stdout_callback = default_with_output_lists/' -e 's/^#?callback_whitelist.*/callback_whitelist = generate_junit/' /etc/ansible/ansible.cfg
    - type: "script"
      title: "determine the release commit for origin images and version for rpms"
      repository: "origin"
      script: |-
        if [[ -n "${PULL_REFS:-}" ]]; then
          export OPENSHIFT_ANSIBLE_TARGET_BRANCH="${PULL_REFS%%:*}"
        fi
        if [[ "${OPENSHIFT_ANSIBLE_TARGET_BRANCH:-}" == "release-1.5" ]]; then
            echo "[INFO] System containers are not supported, skipping."
            exit 0
        fi

        jobs_repo="/data/src/github.com/openshift/aos-cd-jobs/"
        git log -1 --pretty=%h >> "${jobs_repo}/ORIGIN_COMMIT"
        ( source hack/lib/init.sh; os::build::rpm::get_nvra_vars; echo "-${OS_RPM_VERSION}-${OS_RPM_RELEASE}" ) >> "${jobs_repo}/ORIGIN_PKG_VERSION"
        ( source hack/lib/init.sh; os::build::rpm::get_nvra_vars; echo "${OS_GIT_MAJOR}.${OS_GIT_MINOR}" | sed "s/+//" ) >> "${jobs_repo}/ORIGIN_RELEASE"
        tag=$( source hack/lib/init.sh; os::build::version::get_vars; echo "v${OS_GIT_MAJOR}.${OS_GIT_MINOR}" | sed "s/+//" )
        if [[ "${tag}" =~ ^v3.(6|7|8|9)$ ]]; then
          git describe --abbrev=0 >> "${jobs_repo}/ORIGIN_TAG"
        else
          echo "${tag}" >> "${jobs_repo}/ORIGIN_TAG"
        fi
        ( source hack/lib/init.sh; os::build::rpm::get_nvra_vars; echo "${OS_RPM_VERSION}" | cut -d'.' -f2 ) >> "${jobs_repo}/ORIGIN_PKG_MINOR_VERSION"
    - type: "script"
      title: "build the image registry container image"
      repository: "image-registry"
      timeout: 3600
      script: |-
        if [[ "${PULL_BASE_REF}" == "master" || "${PULL_BASE_REF}" == "release-3.7" || "${PULL_BASE_REF}" == "release-3.8" || "${PULL_BASE_REF}" == "release-3.9" ]]; then
          make build-images
          docker tag openshift/origin-docker-registry:latest "openshift/origin-docker-registry:$( cat /data/src/github.com/openshift/aos-cd-jobs/ORIGIN_COMMIT )"
        fi
    - type: "script"
      title: "build the kubernetes metrics server container image"
      repository: "kubernetes-metrics-server"
      timeout: 3600
      script: |-
        if [[ "${PULL_BASE_REF}" == "master" || "${PULL_BASE_REF}" == "release-3.9" ]]; then
          make build-images
          docker tag openshift/origin-metrics-server:latest "openshift/origin-metrics-server:$( cat /data/src/github.com/openshift/aos-cd-jobs/ORIGIN_COMMIT )"
        fi
    - type: "script"
      title: "origin prerequisites"
      repository: "aos-cd-jobs"
      script: |-
        ansible-playbook -vv --become               \
                         --become-user root         \
                         --connection local         \
                         --inventory sjb/inventory/ \
                         -e containerized=true      \
                         -e openshift_deployment_type=origin  \
                         -e openshift_pkg_version="$( cat ./ORIGIN_PKG_VERSION )"            \
                         -e openshift_release="$( cat ./ORIGIN_RELEASE )"                    \
                         /usr/share/ansible/openshift-ansible/playbooks/prerequisites.yml
    - type: "script"
      title: "install origin"
      repository: "aos-cd-jobs"
      script: |-
        if [[ -n "${PULL_REFS:-}" ]]; then
          export OPENSHIFT_ANSIBLE_TARGET_BRANCH="${PULL_REFS%%:*}"
        fi
        if [[ "${OPENSHIFT_ANSIBLE_TARGET_BRANCH:-}" == "release-1.5" ]]; then
            echo "[INFO] System containers are not supported, skipping."
            exit 0
        fi

        playbook_base='/usr/share/ansible/openshift-ansible/playbooks/'
        if [[ -s "${playbook_base}/openshift-node/network_manager.yml" ]]; then
            playbook="${playbook_base}openshift-node/network_manager.yml"
        else
            playbook="${playbook_base}byo/openshift-node/network_manager.yml"
        fi
        ansible-playbook -vv --become               \
                         --become-user root         \
                         --connection local         \
                         --inventory sjb/inventory/ \
                         -e containerized=true      \
                         -e openshift_deployment_type=origin  \
                         -e openshift_pkg_version="$( cat ./ORIGIN_PKG_VERSION )"            \
                         -e openshift_release="$( cat ./ORIGIN_RELEASE )"                    \
                         ${playbook}
        # install atomic rpm
        sudo yum install atomic -y
        # only origin, openvswitch and node docker images are run as system containers
        sudo atomic pull --storage ostree docker:openshift/origin:$( cat ./ORIGIN_TAG )
        sudo atomic pull --storage ostree docker:openshift/openvswitch:$( cat ./ORIGIN_TAG )
        sudo atomic pull --storage ostree docker:openshift/node:$( cat ./ORIGIN_TAG )
        if [[ -s "${playbook_base}deploy_cluster.yml" ]]; then
            playbook="${playbook_base}deploy_cluster.yml"
        else
            playbook="${playbook_base}byo/config.yml"
        fi
        ansible-playbook -vv --become               \
                         --become-user root         \
                         --connection local         \
                         --inventory sjb/inventory/ \
                         -e openshift_use_system_containers=true \
                         -e openshift_docker_systemcontainer_image_override=brew-pulp-docker01.web.prod.ext.phx2.redhat.com:8888/rhel7 \
                         -e system_images_registry=docker \
                         -e containerized=true      \
                         -e openshift_deployment_type=origin  \
                         -e openshift_pkg_version="$( cat ./ORIGIN_PKG_VERSION )"            \
                         -e openshift_release="$( cat ./ORIGIN_RELEASE )"                    \
                         -e oreg_url='openshift/origin-${component}:'"$( cat ./ORIGIN_TAG )" \
                         -e openshift_node_port_range='30000-32000'                          \
                         -e 'osm_controller_args={"enable-hostpath-provisioner":["true"]}'   \
                         ${playbook}
    - type: "script"
      title: "ensure built version of origin is installed"
      timeout: 600
      repository: "aos-cd-jobs"
      script: |-
        if [[ -n "${PULL_REFS:-}" ]]; then
          export OPENSHIFT_ANSIBLE_TARGET_BRANCH="${PULL_REFS%%:*}"
        fi
        if [[ "${OPENSHIFT_ANSIBLE_TARGET_BRANCH:-}" == "release-1.5" ]]; then
            echo "[INFO] System containers are not supported, skipping."
            exit 0
        fi

        docker_image_tag="$( cat ./ORIGIN_TAG )"
        docker_repository="${OS_IMAGE_PREFIX:-"openshift/origin"}"
        [[ "$(sudo atomic containers list -n --no-trunc -f runtime=runc -f image=${docker_repository}:${docker_image_tag} --json | jq '.[0].running')" == "true" ]]
    - type: "script"
      title: "update origin to release"
      repository: "aos-cd-jobs"
      timeout: 1800
      script: |-
        if [[ "${OPENSHIFT_ANSIBLE_TARGET_BRANCH:-}" == "release-1.5" ]]; then
            echo "[INFO] System containers are not supported, skipping."
            exit 0
        fi
        ansible-playbook -vv --become               \
                         --become-user root         \
                         --connection local         \
                         --inventory sjb/inventory/ \
                         -e openshift_use_system_containers=true \
                         -e openshift_docker_systemcontainer_image_override=brew-pulp-docker01.web.prod.ext.phx2.redhat.com:8888/rhel7 \
                         -e system_images_registry=docker \
                         -e containerized=true      \
                         -e openshift_deployment_type=origin  \
                         -e openshift_pkg_version="$( cat ./ORIGIN_PKG_VERSION )"            \
                         -e openshift_release="$( cat ./ORIGIN_RELEASE )"                    \
                         -e oreg_url='openshift/origin-${component}:'"$( cat ./ORIGIN_TAG )" \
                         -e openshift_node_port_range='30000-32000'                          \
                         -e 'osm_controller_args={"enable-hostpath-provisioner":["true"]}'   \
                         -e openshift_disable_check="disk_availability,memory_availability,package_availability,docker_image_availability,docker_storage,package_version" \
                         /usr/share/ansible/openshift-ansible/playbooks/byo/openshift-cluster/upgrades/v3_$( cat ./ORIGIN_PKG_MINOR_VERSION )/upgrade.yml
                         # Upgrade to the same version, just to test the upgrade execution path
    - type: "script"
      title: "expose the kubeconfig"
      script: |-
        if [[ -n "${PULL_REFS:-}" ]]; then
          export OPENSHIFT_ANSIBLE_TARGET_BRANCH="${PULL_REFS%%:*}"
        fi
        if [[ "${OPENSHIFT_ANSIBLE_TARGET_BRANCH:-}" == "release-1.5" ]]; then
            echo "[INFO] System containers are not supported, skipping."
            exit 0
        fi

        sudo chmod a+x /etc/ /etc/origin/ /etc/origin/master/
        sudo chmod a+rw /etc/origin/master/admin.kubeconfig
    - type: "script"
      title: "ensure built version of origin is upgraded"
      timeout: 600
      repository: "aos-cd-jobs"
      script: |-
        if [[ -n "${PULL_REFS:-}" ]]; then
          export OPENSHIFT_ANSIBLE_TARGET_BRANCH="${PULL_REFS%%:*}"
        fi
        if [[ "${OPENSHIFT_ANSIBLE_TARGET_BRANCH:-}" == "release-1.5" ]]; then
            echo "[INFO] System containers are not supported, skipping."
            exit 0
        fi

        docker_image_tag="$( cat ./ORIGIN_TAG )"
        docker_repository="${OS_IMAGE_PREFIX:-"openshift/origin"}"
        [[ "$(sudo atomic containers list -n --no-trunc -f runtime=runc -f image=${docker_repository}:${docker_image_tag} --json | jq '.[0].running')" == "true" ]]
    - type: "script"
      title: "run extended tests"
      repository: "origin"
      script: |-
        if [[ -n "${PULL_REFS:-}" ]]; then
          export OPENSHIFT_ANSIBLE_TARGET_BRANCH="${PULL_REFS%%:*}"
        fi
        if [[ "${OPENSHIFT_ANSIBLE_TARGET_BRANCH:-}" == "release-1.5" ]]; then
            echo "[INFO] System containers are not supported, skipping."
            exit 0
        fi

        OS_BUILD_ENV_PULL_IMAGE=true OS_BUILD_ENV_PRESERVE=_output/local/bin/linux/amd64/extended.test hack/env make build-extended-test
        # configure dnsmasq to forward requests to openhsift's DNS
        cat <<HEREDOC > ci-dnsmasq.conf
        server=/local/127.0.0.1#8053
        server=/17.30.172.in-addr.arpa/127.0.0.1#8053
        HEREDOC
        sudo cp ci-dnsmasq.conf /etc/dnsmasq.d/ci-dnsmasq.conf
        sudo systemctl restart dnsmasq
        sudo systemctl status dnsmasq
        # run the tests with fingers crossed
        #OPENSHIFT_SKIP_BUILD='true' KUBECONFIG=/etc/origin/master/admin.kubeconfig TEST_ONLY='true' JUNIT_REPORT='true' SUITE=conformance make test-extended TEST_EXTENDED_ARGS="-ginkgo.skip=should\sanswer\sendpoint\sand\swildcard\squeries\sfor\sthe\scluster|should\sprovide\sDNS\sfor\spods\sfor\sHostname\sand\sSubdomain\sAnnotation|should\sprovide\sDNS\sfor\sservices|should\sprovide\sDNS\sfor\sthe\scluster|should\sexpose\sthe\sprofiling\sendpoints"
  system_journals:
    - origin-master.service
    - origin-master-api.service
    - origin-master-controllers.service
    - origin-node.service
    - openvswitch.service
    - ovs-vswitchd.service
    - ovsdb-server.service
    - etcd.service
    - systemd-journald.service
