---
parent: 'common/test_cases/origin_built_release.yml'
overrides:
  sync_repos:
    - name: "origin-aggregated-logging"
      type: "pull_request"
    - name: "openshift-ansible"
    - name: "aos-cd-jobs"
extensions:
  parameters:
    - name: OPENSHIFT_ANSIBLE_UPGRADE_FROM_REF
      description: Pre-upgrade git ref, used when deploying EFK, defaults to $PULL_BASE_REF
    - name: ORIGIN_UPGRADE_FROM_PREFIX
      description: Pre-upgrade repository used for deployment of EFK, defaults to docker.io/openshift/origin-
    - name: ORIGIN_UPGRADE_FROM_VERSION
      description: Pre-upgrade versions of images for EFK, defaults to $PULL_BASE_REF
  actions:
    - type: "script"
      title: "build origin-aggregated-logging images"
      repository: "origin-aggregated-logging"
      script: |-
        git_commit=$( git log -n 1 --pretty=%H )
        echo "Building origin-aggregated images for commit $git_commit"
        hack/build-images.sh
    - type: "script"
      title: "build an openshift-ansible release"
      repository: "openshift-ansible"
      script: |-
        git checkout "${PULL_REFS%%:*}"
        tito_tmp_dir="tito"
        rm -rf "${tito_tmp_dir}"
        mkdir -p "${tito_tmp_dir}"
        tito tag --offline --accept-auto-changelog
        tito build --output="${tito_tmp_dir}" --rpm --test --offline --quiet
        createrepo "${tito_tmp_dir}/noarch"
        cat << EOR > ./openshift-ansible-local-release.repo
        [openshift-ansible-local-release]
        baseurl = file://$( pwd )/${tito_tmp_dir}/noarch
        gpgcheck = 0
        name = OpenShift Ansible Release from Local Source
        EOR
        sudo cp ./openshift-ansible-local-release.repo /etc/yum.repos.d
    - type: "script"
      title: "install the openshift-ansible release"
      repository: "openshift-ansible"
      script: |-
        last_tag="$( git describe --tags --abbrev=0 --exact-match HEAD )"
        last_commit="$( git log -n 1 --pretty=%h )"
        sudo yum install -y "atomic-openshift-utils${last_tag/openshift-ansible/}.git.0.${last_commit}.el7"
        rpm -V "atomic-openshift-utils${last_tag/openshift-ansible/}.git.0.${last_commit}.el7"
    - type: "script"
      title: "install Ansible plugins"
      repository: "origin"
      script: |-
        sudo chmod o+rw /etc/environment
        echo "ANSIBLE_JUNIT_DIR=$( pwd )/_output/scripts/ansible_junit" >> /etc/environment
        sudo mkdir -p /usr/share/ansible/plugins/callback
        for plugin in 'default_with_output_lists' 'generate_junit'; do
           wget "https://raw.githubusercontent.com/openshift/origin-ci-tool/master/oct/ansible/oct/callback_plugins/${plugin}.py"
           sudo mv "${plugin}.py" /usr/share/ansible/plugins/callback
        done
        sudo sed -r -i -e 's/^#?stdout_callback.*/stdout_callback = default_with_output_lists/' -e 's/^#?callback_whitelist.*/callback_whitelist = generate_junit/' /etc/ansible/ansible.cfg
    - type: "script"
      title: "determine the release commit for origin images and version for rpms"
      repository: "origin"
      script: |-
        # is logging using master or a release branch?
        pushd "/data/src/github.com/openshift/origin-aggregated-logging/"
        curbranch=$( git rev-parse --abbrev-ref HEAD )
        popd
        jobs_repo="/data/src/github.com/openshift/aos-cd-jobs/"
        if [[ "${curbranch}" == master ]] ; then
           git log -1 --pretty=%h >> "${jobs_repo}/ORIGIN_COMMIT"
           ( source hack/lib/init.sh; os::build::rpm::get_nvra_vars; echo "-${OS_RPM_VERSION}-${OS_RPM_RELEASE}" ) >> "${jobs_repo}/ORIGIN_PKG_VERSION"
           ( source hack/lib/init.sh; os::build::rpm::get_nvra_vars; echo "${OS_GIT_MAJOR}.${OS_GIT_MINOR}" | sed "s/+//" ) >> "${jobs_repo}/ORIGIN_RELEASE"
        elif [[ "${curbranch}" =~ ^release-* ]] ; then
           pushd "/data/src/github.com/openshift/origin-aggregated-logging/"
           # get repo ver from branch name
           repover=$( echo "${curbranch}" | sed -e 's/release-//' -e 's/[.]//' )
           originver=$( echo "${curbranch}" | sed -e 's/release-//' )
           # get version from tag
           closest_tag=$( git describe --tags --abbrev=0 )
           # pkg ver is closest_tag with leading "-" instead of "v"
           pkgver=$( echo "${closest_tag}" | sed 's/^v/-/' )
           # disable all of the centos repos except for the one for the
           # version being tested - this assumes a devenv environment where
           # all of the repos are installed
           foundrepover=false
           for repo in $( sudo yum repolist all | awk '/^[!]?centos-paas-sig-openshift-origin/ {print gensub(/^!/,"",1,$1)}' ) ; do
              case $repo in
                 centos-paas-sig-openshift-origin${repover}-rpms)
                   foundrepover=true # found a repo for this version
                   sudo yum-config-manager --enable $repo > /dev/null ;;
                 *)
                   sudo yum-config-manager --disable $repo > /dev/null ;;
              esac
           done
           # disable local origin repo if foundrepover is true - else, we do not have
           # a release specific repo, use origin-local-release
           if [[ "${foundrepover:-false}" == true ]] ; then
              echo "${closest_tag}" > ${jobs_repo}/ORIGIN_COMMIT
              echo "${pkgver}" > ${jobs_repo}/ORIGIN_PKG_VERSION
              echo "${originver}" > ${jobs_repo}/ORIGIN_RELEASE
              sudo yum-config-manager --disable origin-local-release > /dev/null
              if ( sudo yum install --assumeno origin${pkgver} 2>&1 || : ) | grep -q 'No package .* available' ; then
                  # just ask yum what the heck the version is
                  pkgver=$( ( sudo yum install --assumeno origin 2>&1 || : ) | awk '$1 == "x86_64" {print $2}' )
                  echo "-${pkgver}" > ${jobs_repo}/ORIGIN_PKG_VERSION
              else
                  echo package origin${pkgver} is available
              fi
           else # use latest on machine
              pushd "/data/src/github.com/openshift/origin/"
              git log -1 --pretty=%h >> "${jobs_repo}/ORIGIN_COMMIT"
              ( source hack/lib/init.sh; os::build::rpm::get_nvra_vars; echo "-${OS_RPM_VERSION}-${OS_RPM_RELEASE}" ) >> "${jobs_repo}/ORIGIN_PKG_VERSION"
              ( source hack/lib/init.sh; os::build::rpm::get_nvra_vars; echo "${OS_GIT_MAJOR}.${OS_GIT_MINOR}" | sed "s/+//" ) >> "${jobs_repo}/ORIGIN_RELEASE"
              popd
           fi
        else
           echo Error: unknown base branch $curbranch: please resubmit PR on master or a release-x.y branch
        fi
        echo "Determined origin_commit $(cat ${jobs_repo}/ORIGIN_COMMIT) and origin_pkg_version $(cat ${jobs_repo}/ORIGIN_PKG_VERSION)"
    - type: "script"
      title: "origin prerequisites"
      repository: "aos-cd-jobs"
      script: |-
        ansible-playbook -vv --become               \
                         --become-user root         \
                         --connection local         \
                         --inventory sjb/inventory/ \
                         -e openshift_deployment_type=origin  \
                         /usr/share/ansible/openshift-ansible/playbooks/prerequisites.yml
    - type: "script"
      title: "install origin"
      repository: "aos-cd-jobs"
      script: |-
        playbook_base='/usr/share/ansible/openshift-ansible/playbooks/'
        if [[ -s "${playbook_base}/openshift-node/network_manager.yml" ]]; then
            playbook="${playbook_base}openshift-node/network_manager.yml"
        else
            playbook="${playbook_base}byo/openshift-node/network_manager.yml"
        fi
        ansible-playbook -vv --become               \
                         --become-user root         \
                         --connection local         \
                         --inventory sjb/inventory/ \
                         -e openshift_deployment_type=origin  \
                         ${playbook}
        if [[ -s "${playbook_base}deploy_cluster.yml" ]]; then
            playbook="${playbook_base}deploy_cluster.yml"
        else
            playbook="${playbook_base}byo/config.yml"
        fi
        ansible-playbook -vv --become               \
                         --become-user root         \
                         --connection local         \
                         --inventory sjb/inventory/ \
                         -e openshift_logging_install_logging=False \
                         -e openshift_deployment_type=origin  \
                         -e debug_level=2           \
                         -e openshift_docker_log_driver=json-file \
                         -e openshift_docker_options="--log-driver=json-file" \
                         -e etcd_data_dir="${ETCD_DATA_DIR}" \
                         -e openshift_pkg_version="$( cat ./ORIGIN_PKG_VERSION )"               \
                         -e oreg_url='openshift/origin-${component}:'"$( cat ./ORIGIN_COMMIT )" \
                         -e openshift_release="$( cat ./ORIGIN_RELEASE )"                       \
                         ${playbook}
    - type: "script"
      title: "expose the kubeconfig"
      script: |-
        sudo chmod a+x /etc/ /etc/origin/ /etc/origin/master/
        sudo chmod a+rw /etc/origin/master/admin.kubeconfig
    - type: "script"
      title: "ensure built version of origin is installed"
      timeout: 600
      repository: "origin"
      script: |-
        pushd "/data/src/github.com/openshift/origin-aggregated-logging/"
        curbranch=$( git rev-parse --abbrev-ref HEAD )
        popd
        if [[ "${curbranch}" == master ]] ; then
           origin_package="$( source hack/lib/init.sh; os::build::rpm::format_nvra )"
           rpm -V "${origin_package}"
        fi
    - type: "forward_parameters"
      parameters:
        - OPENSHIFT_ANSIBLE_UPGRADE_FROM_REF
        - ORIGIN_UPGRADE_FROM_PREFIX
        - ORIGIN_UPGRADE_FROM_VERSION
    - type: "script"
      title: "install origin-aggregated-logging to upgrade from"
      repository: "aos-cd-jobs"
      script: |-
        pushd "/data/src/github.com/openshift/origin-aggregated-logging/"
        git branch -v
        if [[ "${OPENSHIFT_ANSIBLE_UPGRADE_FROM_REF:-}" ]]; then
            echo "Checking out $OPENSHIFT_ANSIBLE_UPGRADE_FROM_REF"
            git checkout "$OPENSHIFT_ANSIBLE_UPGRADE_FROM_REF"
        fi
        popd
        playbook_base='/data/src/github.com/openshift/openshift-ansible/playbooks/'
        if [[ -s "${playbook_base}openshift-logging/config.yml" ]]; then
            playbook="${playbook_base}openshift-logging/config.yml"
        else
            playbook="${playbook_base}byo/openshift-cluster/openshift-logging.yml"
        fi
        if [[ -z "${ORIGIN_UPGRADE_FROM_PREFIX:-}" ]]; then
            ORIGIN_UPGRADE_FROM_PREFIX=docker.io/openshift/origin-
        fi
        if [[ -z "${ORIGIN_UPGRADE_FROM_VERSION:-}" ]]; then
            if [[ "${PULL_BASE_REF:-}" =~ release-* ]]; then
                ORIGIN_UPGRADE_FROM_VERSION="v${PULL_BASE_REF#release-}"
            else
                ORIGIN_UPGRADE_FROM_VERSION=latest
            fi
        fi
        echo "Using $ORIGIN_UPGRADE_FROM_PREFIX and $ORIGIN_UPGRADE_FROM_VERSION"
        mkdir -m 777 -p /tmp/es/pv
        chcon -u system_u -r object_r -t svirt_sandbox_file_t /tmp/es/pv
        chcon -u system_u -r object_r -t svirt_sandbox_file_t /tmp/es
        export KUBECONFIG=/etc/origin/master/admin.kubeconfig
        oc adm policy add-scc-to-user hostaccess system:serviceaccount:logging:aggregated-logging-elasticsearch
        ansible-playbook -vv --become               \
                         --become-user root         \
                         --connection local         \
                         --inventory sjb/inventory/ \
                         -e openshift_logging_elasticsearch_storage_type=hostmount \
                         -e openshift_logging_elasticsearch_hostmount_path='/tmp/es/pv' \
                         -e deployment_type=origin  \
                         -e debug_level=2           \
                         -e openshift_logging_install_logging=True \
                         -e openshift_logging_image_prefix=$ORIGIN_UPGRADE_FROM_PREFIX \
                         -e openshift_logging_image_version=$ORIGIN_UPGRADE_FROM_VERSION \
                         -e openshift_logging_elasticsearch_proxy_image_prefix="docker.io/openshift/" \
                         -e openshift_logging_elasticsearch_proxy_image_version="v1.0.0" \
                         -e openshift_hosted_logging_hostname="kibana.127.0.0.1.nip.io"           \
                         -e openshift_logging_master_public_url="https://localhost:8443"          \
                         -e openshift_master_logging_public_url="https://kibana.127.0.0.1.nip.io" \
                         -e openshift_logging_es_allow_external=True                              \
                         -e openshift_logging_es_ops_allow_external=True                          \
                         ${playbook} \
                         --skip-tags=update_master_config
    - type: "script"
      title: "pre-upgrade test"
      repository: "origin-aggregated-logging"
      script: |-
        KUBECONFIG=/etc/origin/master/admin.kubeconfig TEST_ONLY=true SKIP_TEARDOWN=true JUNIT_REPORT=true make test-pre-upgrade
    - type: "script"
      title: "install origin-aggregated-logging to update to"
      repository: "aos-cd-jobs"
      script: |-
        playbook_base='/usr/share/ansible/openshift-ansible/playbooks/'
        if [[ -s "${playbook_base}openshift-logging/config.yml" ]]; then
            playbook="${playbook_base}openshift-logging/config.yml"
        else
            playbook="${playbook_base}byo/openshift-cluster/openshift-logging.yml"
        fi
        #                          -e openshift_logging_install_eventrouter=True                            \
        # richm 20171205 - ansible "too much recursion" bug
        ansible-playbook -vv --become               \
                         --become-user root         \
                         --connection local         \
                         --inventory sjb/inventory/ \
                         -e openshift_deployment_type=origin  \
                         -e debug_level=2           \
                         -e openshift_logging_install_logging=True \
                         -e openshift_logging_elasticsearch_storage_type=hostmount \
                         -e openshift_logging_elasticsearch_hostmount_path='/tmp/es/pv' \
                         -e openshift_logging_image_prefix="openshift/origin-" \
                         -e openshift_logging_elasticsearch_proxy_image_prefix="docker.io/openshift/" \
                         -e openshift_hosted_logging_hostname="kibana.127.0.0.1.nip.io"           \
                         -e openshift_logging_master_public_url="https://localhost:8443"          \
                         -e openshift_master_logging_public_url="https://kibana.127.0.0.1.nip.io" \
                         -e openshift_logging_use_mux=True                                        \
                         -e openshift_logging_mux_allow_external=True                             \
                         -e openshift_logging_es_allow_external=True                              \
                         -e openshift_logging_es_ops_allow_external=True                          \
                         ${playbook} \
                         --skip-tags=update_master_config
    - type: "script"
      title: "post-upgrade test"
      repository: "origin-aggregated-logging"
      script: |-
        KUBECONFIG=/etc/origin/master/admin.kubeconfig TEST_ONLY=true SKIP_TEARDOWN=true JUNIT_REPORT=true make test-upgrade
  system_journals:
    - origin-master.service
    - origin-master-api.service
    - origin-master-controllers.service
    - origin-node.service
    - openvswitch.service
    - ovs-vswitchd.service
    - ovsdb-server.service
    - etcd.service
    - systemd-journald.service
  artifacts:
    - "/data/src/github.com/openshift/origin-aggregated-logging/_output/scripts"
